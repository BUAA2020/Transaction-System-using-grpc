// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: basicInfoService.proto

#include "basicInfoService.pb.h"
#include "basicInfoService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace myApplication {

static const char* BasicInfoService_method_names[] = {
  "/myApplication.BasicInfoService/doLogin",
  "/myApplication.BasicInfoService/doRegister",
  "/myApplication.BasicInfoService/doModifyUserInfo",
  "/myApplication.BasicInfoService/doSearchUserInfo",
  "/myApplication.BasicInfoService/doModifyGoodInfo",
  "/myApplication.BasicInfoService/doSearchGoodInfo",
};

std::unique_ptr< BasicInfoService::Stub> BasicInfoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BasicInfoService::Stub> stub(new BasicInfoService::Stub(channel, options));
  return stub;
}

BasicInfoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_doLogin_(BasicInfoService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_doRegister_(BasicInfoService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_doModifyUserInfo_(BasicInfoService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_doSearchUserInfo_(BasicInfoService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_doModifyGoodInfo_(BasicInfoService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_doSearchGoodInfo_(BasicInfoService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BasicInfoService::Stub::doLogin(::grpc::ClientContext* context, const ::myApplication::loginReq& request, ::myApplication::loginRsq* response) {
  return ::grpc::internal::BlockingUnaryCall< ::myApplication::loginReq, ::myApplication::loginRsq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_doLogin_, context, request, response);
}

void BasicInfoService::Stub::async::doLogin(::grpc::ClientContext* context, const ::myApplication::loginReq* request, ::myApplication::loginRsq* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::myApplication::loginReq, ::myApplication::loginRsq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_doLogin_, context, request, response, std::move(f));
}

void BasicInfoService::Stub::async::doLogin(::grpc::ClientContext* context, const ::myApplication::loginReq* request, ::myApplication::loginRsq* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_doLogin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::myApplication::loginRsq>* BasicInfoService::Stub::PrepareAsyncdoLoginRaw(::grpc::ClientContext* context, const ::myApplication::loginReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::myApplication::loginRsq, ::myApplication::loginReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_doLogin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::myApplication::loginRsq>* BasicInfoService::Stub::AsyncdoLoginRaw(::grpc::ClientContext* context, const ::myApplication::loginReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdoLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BasicInfoService::Stub::doRegister(::grpc::ClientContext* context, const ::myApplication::registerReq& request, ::myApplication::registerRsq* response) {
  return ::grpc::internal::BlockingUnaryCall< ::myApplication::registerReq, ::myApplication::registerRsq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_doRegister_, context, request, response);
}

void BasicInfoService::Stub::async::doRegister(::grpc::ClientContext* context, const ::myApplication::registerReq* request, ::myApplication::registerRsq* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::myApplication::registerReq, ::myApplication::registerRsq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_doRegister_, context, request, response, std::move(f));
}

void BasicInfoService::Stub::async::doRegister(::grpc::ClientContext* context, const ::myApplication::registerReq* request, ::myApplication::registerRsq* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_doRegister_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::myApplication::registerRsq>* BasicInfoService::Stub::PrepareAsyncdoRegisterRaw(::grpc::ClientContext* context, const ::myApplication::registerReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::myApplication::registerRsq, ::myApplication::registerReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_doRegister_, context, request);
}

::grpc::ClientAsyncResponseReader< ::myApplication::registerRsq>* BasicInfoService::Stub::AsyncdoRegisterRaw(::grpc::ClientContext* context, const ::myApplication::registerReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdoRegisterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BasicInfoService::Stub::doModifyUserInfo(::grpc::ClientContext* context, const ::myApplication::modifyUserReq& request, ::myApplication::modifyUserRsq* response) {
  return ::grpc::internal::BlockingUnaryCall< ::myApplication::modifyUserReq, ::myApplication::modifyUserRsq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_doModifyUserInfo_, context, request, response);
}

void BasicInfoService::Stub::async::doModifyUserInfo(::grpc::ClientContext* context, const ::myApplication::modifyUserReq* request, ::myApplication::modifyUserRsq* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::myApplication::modifyUserReq, ::myApplication::modifyUserRsq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_doModifyUserInfo_, context, request, response, std::move(f));
}

void BasicInfoService::Stub::async::doModifyUserInfo(::grpc::ClientContext* context, const ::myApplication::modifyUserReq* request, ::myApplication::modifyUserRsq* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_doModifyUserInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::myApplication::modifyUserRsq>* BasicInfoService::Stub::PrepareAsyncdoModifyUserInfoRaw(::grpc::ClientContext* context, const ::myApplication::modifyUserReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::myApplication::modifyUserRsq, ::myApplication::modifyUserReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_doModifyUserInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::myApplication::modifyUserRsq>* BasicInfoService::Stub::AsyncdoModifyUserInfoRaw(::grpc::ClientContext* context, const ::myApplication::modifyUserReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdoModifyUserInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BasicInfoService::Stub::doSearchUserInfo(::grpc::ClientContext* context, const ::myApplication::searchUserReq& request, ::myApplication::searchUserRsq* response) {
  return ::grpc::internal::BlockingUnaryCall< ::myApplication::searchUserReq, ::myApplication::searchUserRsq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_doSearchUserInfo_, context, request, response);
}

void BasicInfoService::Stub::async::doSearchUserInfo(::grpc::ClientContext* context, const ::myApplication::searchUserReq* request, ::myApplication::searchUserRsq* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::myApplication::searchUserReq, ::myApplication::searchUserRsq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_doSearchUserInfo_, context, request, response, std::move(f));
}

void BasicInfoService::Stub::async::doSearchUserInfo(::grpc::ClientContext* context, const ::myApplication::searchUserReq* request, ::myApplication::searchUserRsq* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_doSearchUserInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::myApplication::searchUserRsq>* BasicInfoService::Stub::PrepareAsyncdoSearchUserInfoRaw(::grpc::ClientContext* context, const ::myApplication::searchUserReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::myApplication::searchUserRsq, ::myApplication::searchUserReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_doSearchUserInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::myApplication::searchUserRsq>* BasicInfoService::Stub::AsyncdoSearchUserInfoRaw(::grpc::ClientContext* context, const ::myApplication::searchUserReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdoSearchUserInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BasicInfoService::Stub::doModifyGoodInfo(::grpc::ClientContext* context, const ::myApplication::modifyGoodReq& request, ::myApplication::modifyGoodRsq* response) {
  return ::grpc::internal::BlockingUnaryCall< ::myApplication::modifyGoodReq, ::myApplication::modifyGoodRsq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_doModifyGoodInfo_, context, request, response);
}

void BasicInfoService::Stub::async::doModifyGoodInfo(::grpc::ClientContext* context, const ::myApplication::modifyGoodReq* request, ::myApplication::modifyGoodRsq* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::myApplication::modifyGoodReq, ::myApplication::modifyGoodRsq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_doModifyGoodInfo_, context, request, response, std::move(f));
}

void BasicInfoService::Stub::async::doModifyGoodInfo(::grpc::ClientContext* context, const ::myApplication::modifyGoodReq* request, ::myApplication::modifyGoodRsq* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_doModifyGoodInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::myApplication::modifyGoodRsq>* BasicInfoService::Stub::PrepareAsyncdoModifyGoodInfoRaw(::grpc::ClientContext* context, const ::myApplication::modifyGoodReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::myApplication::modifyGoodRsq, ::myApplication::modifyGoodReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_doModifyGoodInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::myApplication::modifyGoodRsq>* BasicInfoService::Stub::AsyncdoModifyGoodInfoRaw(::grpc::ClientContext* context, const ::myApplication::modifyGoodReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdoModifyGoodInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BasicInfoService::Stub::doSearchGoodInfo(::grpc::ClientContext* context, const ::myApplication::searchGoodReq& request, ::myApplication::searchGoodRsq* response) {
  return ::grpc::internal::BlockingUnaryCall< ::myApplication::searchGoodReq, ::myApplication::searchGoodRsq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_doSearchGoodInfo_, context, request, response);
}

void BasicInfoService::Stub::async::doSearchGoodInfo(::grpc::ClientContext* context, const ::myApplication::searchGoodReq* request, ::myApplication::searchGoodRsq* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::myApplication::searchGoodReq, ::myApplication::searchGoodRsq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_doSearchGoodInfo_, context, request, response, std::move(f));
}

void BasicInfoService::Stub::async::doSearchGoodInfo(::grpc::ClientContext* context, const ::myApplication::searchGoodReq* request, ::myApplication::searchGoodRsq* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_doSearchGoodInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::myApplication::searchGoodRsq>* BasicInfoService::Stub::PrepareAsyncdoSearchGoodInfoRaw(::grpc::ClientContext* context, const ::myApplication::searchGoodReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::myApplication::searchGoodRsq, ::myApplication::searchGoodReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_doSearchGoodInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::myApplication::searchGoodRsq>* BasicInfoService::Stub::AsyncdoSearchGoodInfoRaw(::grpc::ClientContext* context, const ::myApplication::searchGoodReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdoSearchGoodInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

BasicInfoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BasicInfoService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BasicInfoService::Service, ::myApplication::loginReq, ::myApplication::loginRsq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BasicInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::myApplication::loginReq* req,
             ::myApplication::loginRsq* resp) {
               return service->doLogin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BasicInfoService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BasicInfoService::Service, ::myApplication::registerReq, ::myApplication::registerRsq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BasicInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::myApplication::registerReq* req,
             ::myApplication::registerRsq* resp) {
               return service->doRegister(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BasicInfoService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BasicInfoService::Service, ::myApplication::modifyUserReq, ::myApplication::modifyUserRsq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BasicInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::myApplication::modifyUserReq* req,
             ::myApplication::modifyUserRsq* resp) {
               return service->doModifyUserInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BasicInfoService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BasicInfoService::Service, ::myApplication::searchUserReq, ::myApplication::searchUserRsq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BasicInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::myApplication::searchUserReq* req,
             ::myApplication::searchUserRsq* resp) {
               return service->doSearchUserInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BasicInfoService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BasicInfoService::Service, ::myApplication::modifyGoodReq, ::myApplication::modifyGoodRsq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BasicInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::myApplication::modifyGoodReq* req,
             ::myApplication::modifyGoodRsq* resp) {
               return service->doModifyGoodInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BasicInfoService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BasicInfoService::Service, ::myApplication::searchGoodReq, ::myApplication::searchGoodRsq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BasicInfoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::myApplication::searchGoodReq* req,
             ::myApplication::searchGoodRsq* resp) {
               return service->doSearchGoodInfo(ctx, req, resp);
             }, this)));
}

BasicInfoService::Service::~Service() {
}

::grpc::Status BasicInfoService::Service::doLogin(::grpc::ServerContext* context, const ::myApplication::loginReq* request, ::myApplication::loginRsq* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BasicInfoService::Service::doRegister(::grpc::ServerContext* context, const ::myApplication::registerReq* request, ::myApplication::registerRsq* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BasicInfoService::Service::doModifyUserInfo(::grpc::ServerContext* context, const ::myApplication::modifyUserReq* request, ::myApplication::modifyUserRsq* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BasicInfoService::Service::doSearchUserInfo(::grpc::ServerContext* context, const ::myApplication::searchUserReq* request, ::myApplication::searchUserRsq* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BasicInfoService::Service::doModifyGoodInfo(::grpc::ServerContext* context, const ::myApplication::modifyGoodReq* request, ::myApplication::modifyGoodRsq* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BasicInfoService::Service::doSearchGoodInfo(::grpc::ServerContext* context, const ::myApplication::searchGoodReq* request, ::myApplication::searchGoodRsq* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace myApplication

