// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: basicInfoService.proto

#include "basicInfoService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace myApplication {
constexpr loginReq::loginReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct loginReqDefaultTypeInternal {
  constexpr loginReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~loginReqDefaultTypeInternal() {}
  union {
    loginReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT loginReqDefaultTypeInternal _loginReq_default_instance_;
constexpr loginRsq::loginRsq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , groupid_(0)
  , status_(0)
  , id_(int64_t{0}){}
struct loginRsqDefaultTypeInternal {
  constexpr loginRsqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~loginRsqDefaultTypeInternal() {}
  union {
    loginRsq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT loginRsqDefaultTypeInternal _loginRsq_default_instance_;
constexpr registerReq::registerReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , groupid_(0){}
struct registerReqDefaultTypeInternal {
  constexpr registerReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~registerReqDefaultTypeInternal() {}
  union {
    registerReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT registerReqDefaultTypeInternal _registerReq_default_instance_;
constexpr registerRsq::registerRsq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(int64_t{0})
  , status_(0){}
struct registerRsqDefaultTypeInternal {
  constexpr registerRsqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~registerRsqDefaultTypeInternal() {}
  union {
    registerRsq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT registerRsqDefaultTypeInternal _registerRsq_default_instance_;
constexpr modifyUserReq::modifyUserReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , money_(int64_t{0}){}
struct modifyUserReqDefaultTypeInternal {
  constexpr modifyUserReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~modifyUserReqDefaultTypeInternal() {}
  union {
    modifyUserReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT modifyUserReqDefaultTypeInternal _modifyUserReq_default_instance_;
constexpr modifyUserRsq::modifyUserRsq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(0){}
struct modifyUserRsqDefaultTypeInternal {
  constexpr modifyUserRsqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~modifyUserRsqDefaultTypeInternal() {}
  union {
    modifyUserRsq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT modifyUserRsqDefaultTypeInternal _modifyUserRsq_default_instance_;
constexpr searchUserReq::searchUserReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(int64_t{0}){}
struct searchUserReqDefaultTypeInternal {
  constexpr searchUserReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~searchUserReqDefaultTypeInternal() {}
  union {
    searchUserReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT searchUserReqDefaultTypeInternal _searchUserReq_default_instance_;
constexpr searchUserRsq_baggood::searchUserRsq_baggood(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : goodname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , goodid_(int64_t{0}){}
struct searchUserRsq_baggoodDefaultTypeInternal {
  constexpr searchUserRsq_baggoodDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~searchUserRsq_baggoodDefaultTypeInternal() {}
  union {
    searchUserRsq_baggood _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT searchUserRsq_baggoodDefaultTypeInternal _searchUserRsq_baggood_default_instance_;
constexpr searchUserRsq::searchUserRsq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : good_()
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , money_(int64_t{0})
  , status_(0){}
struct searchUserRsqDefaultTypeInternal {
  constexpr searchUserRsqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~searchUserRsqDefaultTypeInternal() {}
  union {
    searchUserRsq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT searchUserRsqDefaultTypeInternal _searchUserRsq_default_instance_;
constexpr modifyGoodReq::modifyGoodReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : goodname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , kind_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , career_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , level_(0)
  , grade_(0)
  , color_(0){}
struct modifyGoodReqDefaultTypeInternal {
  constexpr modifyGoodReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~modifyGoodReqDefaultTypeInternal() {}
  union {
    modifyGoodReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT modifyGoodReqDefaultTypeInternal _modifyGoodReq_default_instance_;
constexpr modifyGoodRsq::modifyGoodRsq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(int64_t{0})
  , status_(0){}
struct modifyGoodRsqDefaultTypeInternal {
  constexpr modifyGoodRsqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~modifyGoodRsqDefaultTypeInternal() {}
  union {
    modifyGoodRsq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT modifyGoodRsqDefaultTypeInternal _modifyGoodRsq_default_instance_;
constexpr searchGoodReq::searchGoodReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(int64_t{0}){}
struct searchGoodReqDefaultTypeInternal {
  constexpr searchGoodReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~searchGoodReqDefaultTypeInternal() {}
  union {
    searchGoodReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT searchGoodReqDefaultTypeInternal _searchGoodReq_default_instance_;
constexpr searchGoodRsq::searchGoodRsq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , goodname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , kind_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , career_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(0)
  , level_(0)
  , grade_(0)
  , color_(0){}
struct searchGoodRsqDefaultTypeInternal {
  constexpr searchGoodRsqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~searchGoodRsqDefaultTypeInternal() {}
  union {
    searchGoodRsq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT searchGoodRsqDefaultTypeInternal _searchGoodRsq_default_instance_;
}  // namespace myApplication
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_basicInfoService_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_basicInfoService_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_basicInfoService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_basicInfoService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myApplication::loginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::myApplication::loginReq, username_),
  PROTOBUF_FIELD_OFFSET(::myApplication::loginReq, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myApplication::loginRsq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::myApplication::loginRsq, groupid_),
  PROTOBUF_FIELD_OFFSET(::myApplication::loginRsq, status_),
  PROTOBUF_FIELD_OFFSET(::myApplication::loginRsq, message_),
  PROTOBUF_FIELD_OFFSET(::myApplication::loginRsq, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myApplication::registerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::myApplication::registerReq, username_),
  PROTOBUF_FIELD_OFFSET(::myApplication::registerReq, password_),
  PROTOBUF_FIELD_OFFSET(::myApplication::registerReq, groupid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myApplication::registerRsq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::myApplication::registerRsq, status_),
  PROTOBUF_FIELD_OFFSET(::myApplication::registerRsq, message_),
  PROTOBUF_FIELD_OFFSET(::myApplication::registerRsq, id_),
  PROTOBUF_FIELD_OFFSET(::myApplication::modifyUserReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::myApplication::modifyUserReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::myApplication::modifyUserReq, username_),
  PROTOBUF_FIELD_OFFSET(::myApplication::modifyUserReq, password_),
  PROTOBUF_FIELD_OFFSET(::myApplication::modifyUserReq, money_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myApplication::modifyUserRsq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::myApplication::modifyUserRsq, status_),
  PROTOBUF_FIELD_OFFSET(::myApplication::modifyUserRsq, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myApplication::searchUserReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::myApplication::searchUserReq, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myApplication::searchUserRsq_baggood, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::myApplication::searchUserRsq_baggood, goodid_),
  PROTOBUF_FIELD_OFFSET(::myApplication::searchUserRsq_baggood, goodname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myApplication::searchUserRsq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::myApplication::searchUserRsq, status_),
  PROTOBUF_FIELD_OFFSET(::myApplication::searchUserRsq, message_),
  PROTOBUF_FIELD_OFFSET(::myApplication::searchUserRsq, good_),
  PROTOBUF_FIELD_OFFSET(::myApplication::searchUserRsq, money_),
  PROTOBUF_FIELD_OFFSET(::myApplication::searchUserRsq, name_),
  PROTOBUF_FIELD_OFFSET(::myApplication::modifyGoodReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::myApplication::modifyGoodReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::myApplication::modifyGoodReq, goodname_),
  PROTOBUF_FIELD_OFFSET(::myApplication::modifyGoodReq, kind_),
  PROTOBUF_FIELD_OFFSET(::myApplication::modifyGoodReq, level_),
  PROTOBUF_FIELD_OFFSET(::myApplication::modifyGoodReq, career_),
  PROTOBUF_FIELD_OFFSET(::myApplication::modifyGoodReq, grade_),
  PROTOBUF_FIELD_OFFSET(::myApplication::modifyGoodReq, color_),
  ~0u,
  0,
  2,
  1,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myApplication::modifyGoodRsq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::myApplication::modifyGoodRsq, status_),
  PROTOBUF_FIELD_OFFSET(::myApplication::modifyGoodRsq, message_),
  PROTOBUF_FIELD_OFFSET(::myApplication::modifyGoodRsq, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myApplication::searchGoodReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::myApplication::searchGoodReq, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myApplication::searchGoodRsq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::myApplication::searchGoodRsq, status_),
  PROTOBUF_FIELD_OFFSET(::myApplication::searchGoodRsq, message_),
  PROTOBUF_FIELD_OFFSET(::myApplication::searchGoodRsq, goodname_),
  PROTOBUF_FIELD_OFFSET(::myApplication::searchGoodRsq, kind_),
  PROTOBUF_FIELD_OFFSET(::myApplication::searchGoodRsq, level_),
  PROTOBUF_FIELD_OFFSET(::myApplication::searchGoodRsq, career_),
  PROTOBUF_FIELD_OFFSET(::myApplication::searchGoodRsq, grade_),
  PROTOBUF_FIELD_OFFSET(::myApplication::searchGoodRsq, color_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::myApplication::loginReq)},
  { 8, -1, -1, sizeof(::myApplication::loginRsq)},
  { 18, -1, -1, sizeof(::myApplication::registerReq)},
  { 27, -1, -1, sizeof(::myApplication::registerRsq)},
  { 36, 45, -1, sizeof(::myApplication::modifyUserReq)},
  { 48, -1, -1, sizeof(::myApplication::modifyUserRsq)},
  { 56, -1, -1, sizeof(::myApplication::searchUserReq)},
  { 63, -1, -1, sizeof(::myApplication::searchUserRsq_baggood)},
  { 71, -1, -1, sizeof(::myApplication::searchUserRsq)},
  { 82, 94, -1, sizeof(::myApplication::modifyGoodReq)},
  { 100, -1, -1, sizeof(::myApplication::modifyGoodRsq)},
  { 109, -1, -1, sizeof(::myApplication::searchGoodReq)},
  { 116, -1, -1, sizeof(::myApplication::searchGoodRsq)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myApplication::_loginReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myApplication::_loginRsq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myApplication::_registerReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myApplication::_registerRsq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myApplication::_modifyUserReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myApplication::_modifyUserRsq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myApplication::_searchUserReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myApplication::_searchUserRsq_baggood_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myApplication::_searchUserRsq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myApplication::_modifyGoodReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myApplication::_modifyGoodRsq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myApplication::_searchGoodReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myApplication::_searchGoodRsq_default_instance_),
};

const char descriptor_table_protodef_basicInfoService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026basicInfoService.proto\022\rmyApplication\""
  ".\n\010loginReq\022\020\n\010userName\030\001 \001(\t\022\020\n\010passWor"
  "d\030\002 \001(\t\"H\n\010loginRsq\022\017\n\007groupid\030\001 \001(\005\022\016\n\006"
  "status\030\002 \001(\005\022\017\n\007message\030\003 \001(\t\022\n\n\002id\030\004 \001("
  "\003\"B\n\013registerReq\022\020\n\010userName\030\001 \001(\t\022\020\n\010pa"
  "ssWord\030\002 \001(\t\022\017\n\007groupid\030\003 \001(\005\":\n\013registe"
  "rRsq\022\016\n\006status\030\001 \001(\005\022\017\n\007message\030\002 \001(\t\022\n\n"
  "\002id\030\003 \001(\003\"Q\n\rmodifyUserReq\022\020\n\010userName\030\001"
  " \001(\t\022\020\n\010passWord\030\002 \001(\t\022\022\n\005money\030\003 \001(\003H\000\210"
  "\001\001B\010\n\006_money\"0\n\rmodifyUserRsq\022\016\n\006status\030"
  "\001 \001(\005\022\017\n\007message\030\002 \001(\t\"\033\n\rsearchUserReq\022"
  "\n\n\002id\030\001 \001(\003\"\256\001\n\rsearchUserRsq\022\016\n\006status\030"
  "\001 \001(\005\022\017\n\007message\030\002 \001(\t\0222\n\004good\030\003 \003(\0132$.m"
  "yApplication.searchUserRsq.baggood\022\r\n\005mo"
  "ney\030\004 \001(\003\022\014\n\004name\030\005 \001(\t\032+\n\007baggood\022\016\n\006go"
  "odid\030\001 \001(\003\022\020\n\010goodname\030\002 \001(\t\"\267\001\n\rmodifyG"
  "oodReq\022\020\n\010goodName\030\001 \001(\t\022\021\n\004kind\030\002 \001(\tH\000"
  "\210\001\001\022\022\n\005level\030\003 \001(\005H\001\210\001\001\022\023\n\006career\030\004 \001(\tH"
  "\002\210\001\001\022\022\n\005grade\030\005 \001(\005H\003\210\001\001\022\022\n\005color\030\006 \001(\005H"
  "\004\210\001\001B\007\n\005_kindB\010\n\006_levelB\t\n\007_careerB\010\n\006_g"
  "radeB\010\n\006_color\"<\n\rmodifyGoodRsq\022\016\n\006statu"
  "s\030\001 \001(\005\022\017\n\007message\030\002 \001(\t\022\n\n\002id\030\003 \001(\003\"\033\n\r"
  "searchGoodReq\022\n\n\002id\030\001 \001(\003\"\215\001\n\rsearchGood"
  "Rsq\022\016\n\006status\030\001 \001(\005\022\017\n\007message\030\002 \001(\t\022\020\n\010"
  "goodName\030\003 \001(\t\022\014\n\004kind\030\004 \001(\t\022\r\n\005level\030\005 "
  "\001(\005\022\016\n\006career\030\006 \001(\t\022\r\n\005grade\030\007 \001(\005\022\r\n\005co"
  "lor\030\010 \001(\0052\341\003\n\020BasicInfoService\022=\n\007doLogi"
  "n\022\027.myApplication.loginReq\032\027.myApplicati"
  "on.loginRsq\"\000\022F\n\ndoRegister\022\032.myApplicat"
  "ion.registerReq\032\032.myApplication.register"
  "Rsq\"\000\022P\n\020doModifyUserInfo\022\034.myApplicatio"
  "n.modifyUserReq\032\034.myApplication.modifyUs"
  "erRsq\"\000\022P\n\020doSearchUserInfo\022\034.myApplicat"
  "ion.searchUserReq\032\034.myApplication.search"
  "UserRsq\"\000\022P\n\020doModifyGoodInfo\022\034.myApplic"
  "ation.modifyGoodReq\032\034.myApplication.modi"
  "fyGoodRsq\"\000\022P\n\020doSearchGoodInfo\022\034.myAppl"
  "ication.searchGoodReq\032\034.myApplication.se"
  "archGoodRsq\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_basicInfoService_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_basicInfoService_2eproto = {
  false, false, 1541, descriptor_table_protodef_basicInfoService_2eproto, "basicInfoService.proto", 
  &descriptor_table_basicInfoService_2eproto_once, nullptr, 0, 13,
  schemas, file_default_instances, TableStruct_basicInfoService_2eproto::offsets,
  file_level_metadata_basicInfoService_2eproto, file_level_enum_descriptors_basicInfoService_2eproto, file_level_service_descriptors_basicInfoService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_basicInfoService_2eproto_getter() {
  return &descriptor_table_basicInfoService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_basicInfoService_2eproto(&descriptor_table_basicInfoService_2eproto);
namespace myApplication {

// ===================================================================

class loginReq::_Internal {
 public:
};

loginReq::loginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:myApplication.loginReq)
}
loginReq::loginReq(const loginReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:myApplication.loginReq)
}

void loginReq::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

loginReq::~loginReq() {
  // @@protoc_insertion_point(destructor:myApplication.loginReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void loginReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void loginReq::ArenaDtor(void* object) {
  loginReq* _this = reinterpret_cast< loginReq* >(object);
  (void)_this;
}
void loginReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void loginReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void loginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:myApplication.loginReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* loginReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myApplication.loginReq.userName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string passWord = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myApplication.loginReq.passWord"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* loginReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myApplication.loginReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userName = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myApplication.loginReq.userName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string passWord = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myApplication.loginReq.passWord");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myApplication.loginReq)
  return target;
}

size_t loginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myApplication.loginReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userName = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string passWord = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData loginReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    loginReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*loginReq::GetClassData() const { return &_class_data_; }

void loginReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<loginReq *>(to)->MergeFrom(
      static_cast<const loginReq &>(from));
}


void loginReq::MergeFrom(const loginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myApplication.loginReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void loginReq::CopyFrom(const loginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myApplication.loginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool loginReq::IsInitialized() const {
  return true;
}

void loginReq::InternalSwap(loginReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata loginReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_basicInfoService_2eproto_getter, &descriptor_table_basicInfoService_2eproto_once,
      file_level_metadata_basicInfoService_2eproto[0]);
}

// ===================================================================

class loginRsq::_Internal {
 public:
};

loginRsq::loginRsq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:myApplication.loginRsq)
}
loginRsq::loginRsq(const loginRsq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  ::memcpy(&groupid_, &from.groupid_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&groupid_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:myApplication.loginRsq)
}

void loginRsq::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&groupid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&groupid_)) + sizeof(id_));
}

loginRsq::~loginRsq() {
  // @@protoc_insertion_point(destructor:myApplication.loginRsq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void loginRsq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void loginRsq::ArenaDtor(void* object) {
  loginRsq* _this = reinterpret_cast< loginRsq* >(object);
  (void)_this;
}
void loginRsq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void loginRsq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void loginRsq::Clear() {
// @@protoc_insertion_point(message_clear_start:myApplication.loginRsq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  ::memset(&groupid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&groupid_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* loginRsq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 groupid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myApplication.loginRsq.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* loginRsq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myApplication.loginRsq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 groupid = 1;
  if (this->_internal_groupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_groupid(), target);
  }

  // int32 status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_status(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myApplication.loginRsq.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // int64 id = 4;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myApplication.loginRsq)
  return target;
}

size_t loginRsq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myApplication.loginRsq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 groupid = 1;
  if (this->_internal_groupid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_groupid());
  }

  // int32 status = 2;
  if (this->_internal_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  // int64 id = 4;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData loginRsq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    loginRsq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*loginRsq::GetClassData() const { return &_class_data_; }

void loginRsq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<loginRsq *>(to)->MergeFrom(
      static_cast<const loginRsq &>(from));
}


void loginRsq::MergeFrom(const loginRsq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myApplication.loginRsq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_groupid() != 0) {
    _internal_set_groupid(from._internal_groupid());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void loginRsq::CopyFrom(const loginRsq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myApplication.loginRsq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool loginRsq::IsInitialized() const {
  return true;
}

void loginRsq::InternalSwap(loginRsq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(loginRsq, id_)
      + sizeof(loginRsq::id_)
      - PROTOBUF_FIELD_OFFSET(loginRsq, groupid_)>(
          reinterpret_cast<char*>(&groupid_),
          reinterpret_cast<char*>(&other->groupid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata loginRsq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_basicInfoService_2eproto_getter, &descriptor_table_basicInfoService_2eproto_once,
      file_level_metadata_basicInfoService_2eproto[1]);
}

// ===================================================================

class registerReq::_Internal {
 public:
};

registerReq::registerReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:myApplication.registerReq)
}
registerReq::registerReq(const registerReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  groupid_ = from.groupid_;
  // @@protoc_insertion_point(copy_constructor:myApplication.registerReq)
}

void registerReq::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
groupid_ = 0;
}

registerReq::~registerReq() {
  // @@protoc_insertion_point(destructor:myApplication.registerReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void registerReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void registerReq::ArenaDtor(void* object) {
  registerReq* _this = reinterpret_cast< registerReq* >(object);
  (void)_this;
}
void registerReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void registerReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void registerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:myApplication.registerReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  password_.ClearToEmpty();
  groupid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* registerReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myApplication.registerReq.userName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string passWord = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myApplication.registerReq.passWord"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 groupid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* registerReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myApplication.registerReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userName = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myApplication.registerReq.userName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string passWord = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myApplication.registerReq.passWord");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // int32 groupid = 3;
  if (this->_internal_groupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_groupid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myApplication.registerReq)
  return target;
}

size_t registerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myApplication.registerReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userName = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string passWord = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // int32 groupid = 3;
  if (this->_internal_groupid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_groupid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData registerReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    registerReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*registerReq::GetClassData() const { return &_class_data_; }

void registerReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<registerReq *>(to)->MergeFrom(
      static_cast<const registerReq &>(from));
}


void registerReq::MergeFrom(const registerReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myApplication.registerReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  if (from._internal_groupid() != 0) {
    _internal_set_groupid(from._internal_groupid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void registerReq::CopyFrom(const registerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myApplication.registerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool registerReq::IsInitialized() const {
  return true;
}

void registerReq::InternalSwap(registerReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
  swap(groupid_, other->groupid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata registerReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_basicInfoService_2eproto_getter, &descriptor_table_basicInfoService_2eproto_once,
      file_level_metadata_basicInfoService_2eproto[2]);
}

// ===================================================================

class registerRsq::_Internal {
 public:
};

registerRsq::registerRsq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:myApplication.registerRsq)
}
registerRsq::registerRsq(const registerRsq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:myApplication.registerRsq)
}

void registerRsq::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&id_)) + sizeof(status_));
}

registerRsq::~registerRsq() {
  // @@protoc_insertion_point(destructor:myApplication.registerRsq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void registerRsq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void registerRsq::ArenaDtor(void* object) {
  registerRsq* _this = reinterpret_cast< registerRsq* >(object);
  (void)_this;
}
void registerRsq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void registerRsq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void registerRsq::Clear() {
// @@protoc_insertion_point(message_clear_start:myApplication.registerRsq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&id_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* registerRsq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myApplication.registerRsq.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* registerRsq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myApplication.registerRsq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myApplication.registerRsq.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // int64 id = 3;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myApplication.registerRsq)
  return target;
}

size_t registerRsq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myApplication.registerRsq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int64 id = 3;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData registerRsq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    registerRsq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*registerRsq::GetClassData() const { return &_class_data_; }

void registerRsq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<registerRsq *>(to)->MergeFrom(
      static_cast<const registerRsq &>(from));
}


void registerRsq::MergeFrom(const registerRsq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myApplication.registerRsq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void registerRsq::CopyFrom(const registerRsq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myApplication.registerRsq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool registerRsq::IsInitialized() const {
  return true;
}

void registerRsq::InternalSwap(registerRsq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(registerRsq, status_)
      + sizeof(registerRsq::status_)
      - PROTOBUF_FIELD_OFFSET(registerRsq, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata registerRsq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_basicInfoService_2eproto_getter, &descriptor_table_basicInfoService_2eproto_once,
      file_level_metadata_basicInfoService_2eproto[3]);
}

// ===================================================================

class modifyUserReq::_Internal {
 public:
  using HasBits = decltype(std::declval<modifyUserReq>()._has_bits_);
  static void set_has_money(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

modifyUserReq::modifyUserReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:myApplication.modifyUserReq)
}
modifyUserReq::modifyUserReq(const modifyUserReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  money_ = from.money_;
  // @@protoc_insertion_point(copy_constructor:myApplication.modifyUserReq)
}

void modifyUserReq::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
money_ = int64_t{0};
}

modifyUserReq::~modifyUserReq() {
  // @@protoc_insertion_point(destructor:myApplication.modifyUserReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void modifyUserReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void modifyUserReq::ArenaDtor(void* object) {
  modifyUserReq* _this = reinterpret_cast< modifyUserReq* >(object);
  (void)_this;
}
void modifyUserReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void modifyUserReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void modifyUserReq::Clear() {
// @@protoc_insertion_point(message_clear_start:myApplication.modifyUserReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  password_.ClearToEmpty();
  money_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* modifyUserReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string userName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myApplication.modifyUserReq.userName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string passWord = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myApplication.modifyUserReq.passWord"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 money = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_money(&has_bits);
          money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* modifyUserReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myApplication.modifyUserReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userName = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myApplication.modifyUserReq.userName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string passWord = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myApplication.modifyUserReq.passWord");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // optional int64 money = 3;
  if (_internal_has_money()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_money(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myApplication.modifyUserReq)
  return target;
}

size_t modifyUserReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myApplication.modifyUserReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userName = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string passWord = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // optional int64 money = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_money());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData modifyUserReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    modifyUserReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*modifyUserReq::GetClassData() const { return &_class_data_; }

void modifyUserReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<modifyUserReq *>(to)->MergeFrom(
      static_cast<const modifyUserReq &>(from));
}


void modifyUserReq::MergeFrom(const modifyUserReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myApplication.modifyUserReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (!from._internal_password().empty()) {
    _internal_set_password(from._internal_password());
  }
  if (from._internal_has_money()) {
    _internal_set_money(from._internal_money());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void modifyUserReq::CopyFrom(const modifyUserReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myApplication.modifyUserReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool modifyUserReq::IsInitialized() const {
  return true;
}

void modifyUserReq::InternalSwap(modifyUserReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, lhs_arena,
      &other->password_, rhs_arena
  );
  swap(money_, other->money_);
}

::PROTOBUF_NAMESPACE_ID::Metadata modifyUserReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_basicInfoService_2eproto_getter, &descriptor_table_basicInfoService_2eproto_once,
      file_level_metadata_basicInfoService_2eproto[4]);
}

// ===================================================================

class modifyUserRsq::_Internal {
 public:
};

modifyUserRsq::modifyUserRsq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:myApplication.modifyUserRsq)
}
modifyUserRsq::modifyUserRsq(const modifyUserRsq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:myApplication.modifyUserRsq)
}

void modifyUserRsq::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_ = 0;
}

modifyUserRsq::~modifyUserRsq() {
  // @@protoc_insertion_point(destructor:myApplication.modifyUserRsq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void modifyUserRsq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void modifyUserRsq::ArenaDtor(void* object) {
  modifyUserRsq* _this = reinterpret_cast< modifyUserRsq* >(object);
  (void)_this;
}
void modifyUserRsq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void modifyUserRsq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void modifyUserRsq::Clear() {
// @@protoc_insertion_point(message_clear_start:myApplication.modifyUserRsq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* modifyUserRsq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myApplication.modifyUserRsq.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* modifyUserRsq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myApplication.modifyUserRsq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myApplication.modifyUserRsq.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myApplication.modifyUserRsq)
  return target;
}

size_t modifyUserRsq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myApplication.modifyUserRsq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData modifyUserRsq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    modifyUserRsq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*modifyUserRsq::GetClassData() const { return &_class_data_; }

void modifyUserRsq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<modifyUserRsq *>(to)->MergeFrom(
      static_cast<const modifyUserRsq &>(from));
}


void modifyUserRsq::MergeFrom(const modifyUserRsq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myApplication.modifyUserRsq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void modifyUserRsq::CopyFrom(const modifyUserRsq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myApplication.modifyUserRsq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool modifyUserRsq::IsInitialized() const {
  return true;
}

void modifyUserRsq::InternalSwap(modifyUserRsq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata modifyUserRsq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_basicInfoService_2eproto_getter, &descriptor_table_basicInfoService_2eproto_once,
      file_level_metadata_basicInfoService_2eproto[5]);
}

// ===================================================================

class searchUserReq::_Internal {
 public:
};

searchUserReq::searchUserReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:myApplication.searchUserReq)
}
searchUserReq::searchUserReq(const searchUserReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:myApplication.searchUserReq)
}

void searchUserReq::SharedCtor() {
id_ = int64_t{0};
}

searchUserReq::~searchUserReq() {
  // @@protoc_insertion_point(destructor:myApplication.searchUserReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void searchUserReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void searchUserReq::ArenaDtor(void* object) {
  searchUserReq* _this = reinterpret_cast< searchUserReq* >(object);
  (void)_this;
}
void searchUserReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void searchUserReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void searchUserReq::Clear() {
// @@protoc_insertion_point(message_clear_start:myApplication.searchUserReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* searchUserReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* searchUserReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myApplication.searchUserReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myApplication.searchUserReq)
  return target;
}

size_t searchUserReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myApplication.searchUserReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData searchUserReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    searchUserReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*searchUserReq::GetClassData() const { return &_class_data_; }

void searchUserReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<searchUserReq *>(to)->MergeFrom(
      static_cast<const searchUserReq &>(from));
}


void searchUserReq::MergeFrom(const searchUserReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myApplication.searchUserReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void searchUserReq::CopyFrom(const searchUserReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myApplication.searchUserReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool searchUserReq::IsInitialized() const {
  return true;
}

void searchUserReq::InternalSwap(searchUserReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata searchUserReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_basicInfoService_2eproto_getter, &descriptor_table_basicInfoService_2eproto_once,
      file_level_metadata_basicInfoService_2eproto[6]);
}

// ===================================================================

class searchUserRsq_baggood::_Internal {
 public:
};

searchUserRsq_baggood::searchUserRsq_baggood(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:myApplication.searchUserRsq.baggood)
}
searchUserRsq_baggood::searchUserRsq_baggood(const searchUserRsq_baggood& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  goodname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_goodname().empty()) {
    goodname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_goodname(), 
      GetArenaForAllocation());
  }
  goodid_ = from.goodid_;
  // @@protoc_insertion_point(copy_constructor:myApplication.searchUserRsq.baggood)
}

void searchUserRsq_baggood::SharedCtor() {
goodname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
goodid_ = int64_t{0};
}

searchUserRsq_baggood::~searchUserRsq_baggood() {
  // @@protoc_insertion_point(destructor:myApplication.searchUserRsq.baggood)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void searchUserRsq_baggood::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  goodname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void searchUserRsq_baggood::ArenaDtor(void* object) {
  searchUserRsq_baggood* _this = reinterpret_cast< searchUserRsq_baggood* >(object);
  (void)_this;
}
void searchUserRsq_baggood::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void searchUserRsq_baggood::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void searchUserRsq_baggood::Clear() {
// @@protoc_insertion_point(message_clear_start:myApplication.searchUserRsq.baggood)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  goodname_.ClearToEmpty();
  goodid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* searchUserRsq_baggood::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 goodid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          goodid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string goodname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_goodname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myApplication.searchUserRsq.baggood.goodname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* searchUserRsq_baggood::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myApplication.searchUserRsq.baggood)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 goodid = 1;
  if (this->_internal_goodid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_goodid(), target);
  }

  // string goodname = 2;
  if (!this->_internal_goodname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_goodname().data(), static_cast<int>(this->_internal_goodname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myApplication.searchUserRsq.baggood.goodname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_goodname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myApplication.searchUserRsq.baggood)
  return target;
}

size_t searchUserRsq_baggood::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myApplication.searchUserRsq.baggood)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string goodname = 2;
  if (!this->_internal_goodname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_goodname());
  }

  // int64 goodid = 1;
  if (this->_internal_goodid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_goodid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData searchUserRsq_baggood::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    searchUserRsq_baggood::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*searchUserRsq_baggood::GetClassData() const { return &_class_data_; }

void searchUserRsq_baggood::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<searchUserRsq_baggood *>(to)->MergeFrom(
      static_cast<const searchUserRsq_baggood &>(from));
}


void searchUserRsq_baggood::MergeFrom(const searchUserRsq_baggood& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myApplication.searchUserRsq.baggood)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_goodname().empty()) {
    _internal_set_goodname(from._internal_goodname());
  }
  if (from._internal_goodid() != 0) {
    _internal_set_goodid(from._internal_goodid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void searchUserRsq_baggood::CopyFrom(const searchUserRsq_baggood& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myApplication.searchUserRsq.baggood)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool searchUserRsq_baggood::IsInitialized() const {
  return true;
}

void searchUserRsq_baggood::InternalSwap(searchUserRsq_baggood* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &goodname_, lhs_arena,
      &other->goodname_, rhs_arena
  );
  swap(goodid_, other->goodid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata searchUserRsq_baggood::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_basicInfoService_2eproto_getter, &descriptor_table_basicInfoService_2eproto_once,
      file_level_metadata_basicInfoService_2eproto[7]);
}

// ===================================================================

class searchUserRsq::_Internal {
 public:
};

searchUserRsq::searchUserRsq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  good_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:myApplication.searchUserRsq)
}
searchUserRsq::searchUserRsq(const searchUserRsq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      good_(from.good_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&money_, &from.money_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&money_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:myApplication.searchUserRsq)
}

void searchUserRsq::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&money_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&money_)) + sizeof(status_));
}

searchUserRsq::~searchUserRsq() {
  // @@protoc_insertion_point(destructor:myApplication.searchUserRsq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void searchUserRsq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void searchUserRsq::ArenaDtor(void* object) {
  searchUserRsq* _this = reinterpret_cast< searchUserRsq* >(object);
  (void)_this;
}
void searchUserRsq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void searchUserRsq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void searchUserRsq::Clear() {
// @@protoc_insertion_point(message_clear_start:myApplication.searchUserRsq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  good_.Clear();
  message_.ClearToEmpty();
  name_.ClearToEmpty();
  ::memset(&money_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&money_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* searchUserRsq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myApplication.searchUserRsq.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .myApplication.searchUserRsq.baggood good = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_good(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 money = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myApplication.searchUserRsq.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* searchUserRsq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myApplication.searchUserRsq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myApplication.searchUserRsq.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // repeated .myApplication.searchUserRsq.baggood good = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_good_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_good(i), target, stream);
  }

  // int64 money = 4;
  if (this->_internal_money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_money(), target);
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myApplication.searchUserRsq.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myApplication.searchUserRsq)
  return target;
}

size_t searchUserRsq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myApplication.searchUserRsq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .myApplication.searchUserRsq.baggood good = 3;
  total_size += 1UL * this->_internal_good_size();
  for (const auto& msg : this->good_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 money = 4;
  if (this->_internal_money() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_money());
  }

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData searchUserRsq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    searchUserRsq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*searchUserRsq::GetClassData() const { return &_class_data_; }

void searchUserRsq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<searchUserRsq *>(to)->MergeFrom(
      static_cast<const searchUserRsq &>(from));
}


void searchUserRsq::MergeFrom(const searchUserRsq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myApplication.searchUserRsq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  good_.MergeFrom(from.good_);
  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_money() != 0) {
    _internal_set_money(from._internal_money());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void searchUserRsq::CopyFrom(const searchUserRsq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myApplication.searchUserRsq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool searchUserRsq::IsInitialized() const {
  return true;
}

void searchUserRsq::InternalSwap(searchUserRsq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  good_.InternalSwap(&other->good_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(searchUserRsq, status_)
      + sizeof(searchUserRsq::status_)
      - PROTOBUF_FIELD_OFFSET(searchUserRsq, money_)>(
          reinterpret_cast<char*>(&money_),
          reinterpret_cast<char*>(&other->money_));
}

::PROTOBUF_NAMESPACE_ID::Metadata searchUserRsq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_basicInfoService_2eproto_getter, &descriptor_table_basicInfoService_2eproto_once,
      file_level_metadata_basicInfoService_2eproto[8]);
}

// ===================================================================

class modifyGoodReq::_Internal {
 public:
  using HasBits = decltype(std::declval<modifyGoodReq>()._has_bits_);
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_career(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_grade(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

modifyGoodReq::modifyGoodReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:myApplication.modifyGoodReq)
}
modifyGoodReq::modifyGoodReq(const modifyGoodReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  goodname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_goodname().empty()) {
    goodname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_goodname(), 
      GetArenaForAllocation());
  }
  kind_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_kind()) {
    kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kind(), 
      GetArenaForAllocation());
  }
  career_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_career()) {
    career_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_career(), 
      GetArenaForAllocation());
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&level_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:myApplication.modifyGoodReq)
}

void modifyGoodReq::SharedCtor() {
goodname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
kind_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
career_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&level_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&level_)) + sizeof(color_));
}

modifyGoodReq::~modifyGoodReq() {
  // @@protoc_insertion_point(destructor:myApplication.modifyGoodReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void modifyGoodReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  goodname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kind_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  career_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void modifyGoodReq::ArenaDtor(void* object) {
  modifyGoodReq* _this = reinterpret_cast< modifyGoodReq* >(object);
  (void)_this;
}
void modifyGoodReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void modifyGoodReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void modifyGoodReq::Clear() {
// @@protoc_insertion_point(message_clear_start:myApplication.modifyGoodReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  goodname_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      kind_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      career_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&color_) -
        reinterpret_cast<char*>(&level_)) + sizeof(color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* modifyGoodReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string goodName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_goodname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myApplication.modifyGoodReq.goodName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string kind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_kind();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myApplication.modifyGoodReq.kind"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string career = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_career();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myApplication.modifyGoodReq.career"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 grade = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_grade(&has_bits);
          grade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_color(&has_bits);
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* modifyGoodReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myApplication.modifyGoodReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string goodName = 1;
  if (!this->_internal_goodname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_goodname().data(), static_cast<int>(this->_internal_goodname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myApplication.modifyGoodReq.goodName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_goodname(), target);
  }

  // optional string kind = 2;
  if (_internal_has_kind()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kind().data(), static_cast<int>(this->_internal_kind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myApplication.modifyGoodReq.kind");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_kind(), target);
  }

  // optional int32 level = 3;
  if (_internal_has_level()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_level(), target);
  }

  // optional string career = 4;
  if (_internal_has_career()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_career().data(), static_cast<int>(this->_internal_career().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myApplication.modifyGoodReq.career");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_career(), target);
  }

  // optional int32 grade = 5;
  if (_internal_has_grade()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_grade(), target);
  }

  // optional int32 color = 6;
  if (_internal_has_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myApplication.modifyGoodReq)
  return target;
}

size_t modifyGoodReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myApplication.modifyGoodReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string goodName = 1;
  if (!this->_internal_goodname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_goodname());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string kind = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_kind());
    }

    // optional string career = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_career());
    }

    // optional int32 level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_level());
    }

    // optional int32 grade = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_grade());
    }

    // optional int32 color = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_color());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData modifyGoodReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    modifyGoodReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*modifyGoodReq::GetClassData() const { return &_class_data_; }

void modifyGoodReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<modifyGoodReq *>(to)->MergeFrom(
      static_cast<const modifyGoodReq &>(from));
}


void modifyGoodReq::MergeFrom(const modifyGoodReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myApplication.modifyGoodReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_goodname().empty()) {
    _internal_set_goodname(from._internal_goodname());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_kind(from._internal_kind());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_career(from._internal_career());
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      grade_ = from.grade_;
    }
    if (cached_has_bits & 0x00000010u) {
      color_ = from.color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void modifyGoodReq::CopyFrom(const modifyGoodReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myApplication.modifyGoodReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool modifyGoodReq::IsInitialized() const {
  return true;
}

void modifyGoodReq::InternalSwap(modifyGoodReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &goodname_, lhs_arena,
      &other->goodname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &kind_, lhs_arena,
      &other->kind_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &career_, lhs_arena,
      &other->career_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(modifyGoodReq, color_)
      + sizeof(modifyGoodReq::color_)
      - PROTOBUF_FIELD_OFFSET(modifyGoodReq, level_)>(
          reinterpret_cast<char*>(&level_),
          reinterpret_cast<char*>(&other->level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata modifyGoodReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_basicInfoService_2eproto_getter, &descriptor_table_basicInfoService_2eproto_once,
      file_level_metadata_basicInfoService_2eproto[9]);
}

// ===================================================================

class modifyGoodRsq::_Internal {
 public:
};

modifyGoodRsq::modifyGoodRsq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:myApplication.modifyGoodRsq)
}
modifyGoodRsq::modifyGoodRsq(const modifyGoodRsq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:myApplication.modifyGoodRsq)
}

void modifyGoodRsq::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&id_)) + sizeof(status_));
}

modifyGoodRsq::~modifyGoodRsq() {
  // @@protoc_insertion_point(destructor:myApplication.modifyGoodRsq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void modifyGoodRsq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void modifyGoodRsq::ArenaDtor(void* object) {
  modifyGoodRsq* _this = reinterpret_cast< modifyGoodRsq* >(object);
  (void)_this;
}
void modifyGoodRsq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void modifyGoodRsq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void modifyGoodRsq::Clear() {
// @@protoc_insertion_point(message_clear_start:myApplication.modifyGoodRsq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&id_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* modifyGoodRsq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myApplication.modifyGoodRsq.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* modifyGoodRsq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myApplication.modifyGoodRsq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myApplication.modifyGoodRsq.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // int64 id = 3;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myApplication.modifyGoodRsq)
  return target;
}

size_t modifyGoodRsq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myApplication.modifyGoodRsq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int64 id = 3;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData modifyGoodRsq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    modifyGoodRsq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*modifyGoodRsq::GetClassData() const { return &_class_data_; }

void modifyGoodRsq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<modifyGoodRsq *>(to)->MergeFrom(
      static_cast<const modifyGoodRsq &>(from));
}


void modifyGoodRsq::MergeFrom(const modifyGoodRsq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myApplication.modifyGoodRsq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void modifyGoodRsq::CopyFrom(const modifyGoodRsq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myApplication.modifyGoodRsq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool modifyGoodRsq::IsInitialized() const {
  return true;
}

void modifyGoodRsq::InternalSwap(modifyGoodRsq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(modifyGoodRsq, status_)
      + sizeof(modifyGoodRsq::status_)
      - PROTOBUF_FIELD_OFFSET(modifyGoodRsq, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata modifyGoodRsq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_basicInfoService_2eproto_getter, &descriptor_table_basicInfoService_2eproto_once,
      file_level_metadata_basicInfoService_2eproto[10]);
}

// ===================================================================

class searchGoodReq::_Internal {
 public:
};

searchGoodReq::searchGoodReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:myApplication.searchGoodReq)
}
searchGoodReq::searchGoodReq(const searchGoodReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:myApplication.searchGoodReq)
}

void searchGoodReq::SharedCtor() {
id_ = int64_t{0};
}

searchGoodReq::~searchGoodReq() {
  // @@protoc_insertion_point(destructor:myApplication.searchGoodReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void searchGoodReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void searchGoodReq::ArenaDtor(void* object) {
  searchGoodReq* _this = reinterpret_cast< searchGoodReq* >(object);
  (void)_this;
}
void searchGoodReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void searchGoodReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void searchGoodReq::Clear() {
// @@protoc_insertion_point(message_clear_start:myApplication.searchGoodReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* searchGoodReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* searchGoodReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myApplication.searchGoodReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myApplication.searchGoodReq)
  return target;
}

size_t searchGoodReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myApplication.searchGoodReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData searchGoodReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    searchGoodReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*searchGoodReq::GetClassData() const { return &_class_data_; }

void searchGoodReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<searchGoodReq *>(to)->MergeFrom(
      static_cast<const searchGoodReq &>(from));
}


void searchGoodReq::MergeFrom(const searchGoodReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myApplication.searchGoodReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void searchGoodReq::CopyFrom(const searchGoodReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myApplication.searchGoodReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool searchGoodReq::IsInitialized() const {
  return true;
}

void searchGoodReq::InternalSwap(searchGoodReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata searchGoodReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_basicInfoService_2eproto_getter, &descriptor_table_basicInfoService_2eproto_once,
      file_level_metadata_basicInfoService_2eproto[11]);
}

// ===================================================================

class searchGoodRsq::_Internal {
 public:
};

searchGoodRsq::searchGoodRsq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:myApplication.searchGoodRsq)
}
searchGoodRsq::searchGoodRsq(const searchGoodRsq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  goodname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_goodname().empty()) {
    goodname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_goodname(), 
      GetArenaForAllocation());
  }
  kind_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_kind().empty()) {
    kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kind(), 
      GetArenaForAllocation());
  }
  career_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_career().empty()) {
    career_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_career(), 
      GetArenaForAllocation());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&status_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:myApplication.searchGoodRsq)
}

void searchGoodRsq::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
goodname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
kind_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
career_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&status_)) + sizeof(color_));
}

searchGoodRsq::~searchGoodRsq() {
  // @@protoc_insertion_point(destructor:myApplication.searchGoodRsq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void searchGoodRsq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  goodname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kind_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  career_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void searchGoodRsq::ArenaDtor(void* object) {
  searchGoodRsq* _this = reinterpret_cast< searchGoodRsq* >(object);
  (void)_this;
}
void searchGoodRsq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void searchGoodRsq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void searchGoodRsq::Clear() {
// @@protoc_insertion_point(message_clear_start:myApplication.searchGoodRsq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  goodname_.ClearToEmpty();
  kind_.ClearToEmpty();
  career_.ClearToEmpty();
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&status_)) + sizeof(color_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* searchGoodRsq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myApplication.searchGoodRsq.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string goodName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_goodname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myApplication.searchGoodRsq.goodName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string kind = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_kind();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myApplication.searchGoodRsq.kind"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string career = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_career();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myApplication.searchGoodRsq.career"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 grade = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          grade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 color = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* searchGoodRsq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myApplication.searchGoodRsq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myApplication.searchGoodRsq.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // string goodName = 3;
  if (!this->_internal_goodname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_goodname().data(), static_cast<int>(this->_internal_goodname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myApplication.searchGoodRsq.goodName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_goodname(), target);
  }

  // string kind = 4;
  if (!this->_internal_kind().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kind().data(), static_cast<int>(this->_internal_kind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myApplication.searchGoodRsq.kind");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_kind(), target);
  }

  // int32 level = 5;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_level(), target);
  }

  // string career = 6;
  if (!this->_internal_career().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_career().data(), static_cast<int>(this->_internal_career().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myApplication.searchGoodRsq.career");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_career(), target);
  }

  // int32 grade = 7;
  if (this->_internal_grade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_grade(), target);
  }

  // int32 color = 8;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myApplication.searchGoodRsq)
  return target;
}

size_t searchGoodRsq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myApplication.searchGoodRsq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string goodName = 3;
  if (!this->_internal_goodname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_goodname());
  }

  // string kind = 4;
  if (!this->_internal_kind().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kind());
  }

  // string career = 6;
  if (!this->_internal_career().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_career());
  }

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  // int32 level = 5;
  if (this->_internal_level() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // int32 grade = 7;
  if (this->_internal_grade() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_grade());
  }

  // int32 color = 8;
  if (this->_internal_color() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_color());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData searchGoodRsq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    searchGoodRsq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*searchGoodRsq::GetClassData() const { return &_class_data_; }

void searchGoodRsq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<searchGoodRsq *>(to)->MergeFrom(
      static_cast<const searchGoodRsq &>(from));
}


void searchGoodRsq::MergeFrom(const searchGoodRsq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myApplication.searchGoodRsq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (!from._internal_goodname().empty()) {
    _internal_set_goodname(from._internal_goodname());
  }
  if (!from._internal_kind().empty()) {
    _internal_set_kind(from._internal_kind());
  }
  if (!from._internal_career().empty()) {
    _internal_set_career(from._internal_career());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from._internal_grade() != 0) {
    _internal_set_grade(from._internal_grade());
  }
  if (from._internal_color() != 0) {
    _internal_set_color(from._internal_color());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void searchGoodRsq::CopyFrom(const searchGoodRsq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myApplication.searchGoodRsq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool searchGoodRsq::IsInitialized() const {
  return true;
}

void searchGoodRsq::InternalSwap(searchGoodRsq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &goodname_, lhs_arena,
      &other->goodname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &kind_, lhs_arena,
      &other->kind_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &career_, lhs_arena,
      &other->career_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(searchGoodRsq, color_)
      + sizeof(searchGoodRsq::color_)
      - PROTOBUF_FIELD_OFFSET(searchGoodRsq, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata searchGoodRsq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_basicInfoService_2eproto_getter, &descriptor_table_basicInfoService_2eproto_once,
      file_level_metadata_basicInfoService_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace myApplication
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::myApplication::loginReq* Arena::CreateMaybeMessage< ::myApplication::loginReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myApplication::loginReq >(arena);
}
template<> PROTOBUF_NOINLINE ::myApplication::loginRsq* Arena::CreateMaybeMessage< ::myApplication::loginRsq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myApplication::loginRsq >(arena);
}
template<> PROTOBUF_NOINLINE ::myApplication::registerReq* Arena::CreateMaybeMessage< ::myApplication::registerReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myApplication::registerReq >(arena);
}
template<> PROTOBUF_NOINLINE ::myApplication::registerRsq* Arena::CreateMaybeMessage< ::myApplication::registerRsq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myApplication::registerRsq >(arena);
}
template<> PROTOBUF_NOINLINE ::myApplication::modifyUserReq* Arena::CreateMaybeMessage< ::myApplication::modifyUserReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myApplication::modifyUserReq >(arena);
}
template<> PROTOBUF_NOINLINE ::myApplication::modifyUserRsq* Arena::CreateMaybeMessage< ::myApplication::modifyUserRsq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myApplication::modifyUserRsq >(arena);
}
template<> PROTOBUF_NOINLINE ::myApplication::searchUserReq* Arena::CreateMaybeMessage< ::myApplication::searchUserReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myApplication::searchUserReq >(arena);
}
template<> PROTOBUF_NOINLINE ::myApplication::searchUserRsq_baggood* Arena::CreateMaybeMessage< ::myApplication::searchUserRsq_baggood >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myApplication::searchUserRsq_baggood >(arena);
}
template<> PROTOBUF_NOINLINE ::myApplication::searchUserRsq* Arena::CreateMaybeMessage< ::myApplication::searchUserRsq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myApplication::searchUserRsq >(arena);
}
template<> PROTOBUF_NOINLINE ::myApplication::modifyGoodReq* Arena::CreateMaybeMessage< ::myApplication::modifyGoodReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myApplication::modifyGoodReq >(arena);
}
template<> PROTOBUF_NOINLINE ::myApplication::modifyGoodRsq* Arena::CreateMaybeMessage< ::myApplication::modifyGoodRsq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myApplication::modifyGoodRsq >(arena);
}
template<> PROTOBUF_NOINLINE ::myApplication::searchGoodReq* Arena::CreateMaybeMessage< ::myApplication::searchGoodReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myApplication::searchGoodReq >(arena);
}
template<> PROTOBUF_NOINLINE ::myApplication::searchGoodRsq* Arena::CreateMaybeMessage< ::myApplication::searchGoodRsq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myApplication::searchGoodRsq >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
