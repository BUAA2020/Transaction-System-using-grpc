// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: SecKillService.proto

#include "SecKillService.pb.h"
#include "SecKillService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace myApplication {

static const char* SeckillService_method_names[] = {
  "/myApplication.SeckillService/doSecKill",
};

std::unique_ptr< SeckillService::Stub> SeckillService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SeckillService::Stub> stub(new SeckillService::Stub(channel, options));
  return stub;
}

SeckillService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_doSecKill_(SeckillService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SeckillService::Stub::doSecKill(::grpc::ClientContext* context, const ::myApplication::SecKillReq& request, ::myApplication::SecKillRsq* response) {
  return ::grpc::internal::BlockingUnaryCall< ::myApplication::SecKillReq, ::myApplication::SecKillRsq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_doSecKill_, context, request, response);
}

void SeckillService::Stub::async::doSecKill(::grpc::ClientContext* context, const ::myApplication::SecKillReq* request, ::myApplication::SecKillRsq* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::myApplication::SecKillReq, ::myApplication::SecKillRsq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_doSecKill_, context, request, response, std::move(f));
}

void SeckillService::Stub::async::doSecKill(::grpc::ClientContext* context, const ::myApplication::SecKillReq* request, ::myApplication::SecKillRsq* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_doSecKill_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::myApplication::SecKillRsq>* SeckillService::Stub::PrepareAsyncdoSecKillRaw(::grpc::ClientContext* context, const ::myApplication::SecKillReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::myApplication::SecKillRsq, ::myApplication::SecKillReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_doSecKill_, context, request);
}

::grpc::ClientAsyncResponseReader< ::myApplication::SecKillRsq>* SeckillService::Stub::AsyncdoSecKillRaw(::grpc::ClientContext* context, const ::myApplication::SecKillReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdoSecKillRaw(context, request, cq);
  result->StartCall();
  return result;
}

SeckillService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SeckillService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SeckillService::Service, ::myApplication::SecKillReq, ::myApplication::SecKillRsq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SeckillService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::myApplication::SecKillReq* req,
             ::myApplication::SecKillRsq* resp) {
               return service->doSecKill(ctx, req, resp);
             }, this)));
}

SeckillService::Service::~Service() {
}

::grpc::Status SeckillService::Service::doSecKill(::grpc::ServerContext* context, const ::myApplication::SecKillReq* request, ::myApplication::SecKillRsq* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace myApplication

