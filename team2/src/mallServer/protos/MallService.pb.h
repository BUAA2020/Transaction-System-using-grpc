// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MallService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MallService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MallService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MallService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MallService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MallService_2eproto;
namespace myApplication {
class ListSpecialGoodReq;
struct ListSpecialGoodReqDefaultTypeInternal;
extern ListSpecialGoodReqDefaultTypeInternal _ListSpecialGoodReq_default_instance_;
class ListSpecialGoodRsq;
struct ListSpecialGoodRsqDefaultTypeInternal;
extern ListSpecialGoodRsqDefaultTypeInternal _ListSpecialGoodRsq_default_instance_;
class ListSpecialGoodRsq_goods;
struct ListSpecialGoodRsq_goodsDefaultTypeInternal;
extern ListSpecialGoodRsq_goodsDefaultTypeInternal _ListSpecialGoodRsq_goods_default_instance_;
class ManageTradesReq;
struct ManageTradesReqDefaultTypeInternal;
extern ManageTradesReqDefaultTypeInternal _ManageTradesReq_default_instance_;
class ManageTradesRsq;
struct ManageTradesRsqDefaultTypeInternal;
extern ManageTradesRsqDefaultTypeInternal _ManageTradesRsq_default_instance_;
class ManageTradesRsq_trade;
struct ManageTradesRsq_tradeDefaultTypeInternal;
extern ManageTradesRsq_tradeDefaultTypeInternal _ManageTradesRsq_trade_default_instance_;
class PurchaseReq;
struct PurchaseReqDefaultTypeInternal;
extern PurchaseReqDefaultTypeInternal _PurchaseReq_default_instance_;
class PurchaseRsq;
struct PurchaseRsqDefaultTypeInternal;
extern PurchaseRsqDefaultTypeInternal _PurchaseRsq_default_instance_;
class SaleReq;
struct SaleReqDefaultTypeInternal;
extern SaleReqDefaultTypeInternal _SaleReq_default_instance_;
class SaleRsq;
struct SaleRsqDefaultTypeInternal;
extern SaleRsqDefaultTypeInternal _SaleRsq_default_instance_;
class SearchOnSaleGoodsReq;
struct SearchOnSaleGoodsReqDefaultTypeInternal;
extern SearchOnSaleGoodsReqDefaultTypeInternal _SearchOnSaleGoodsReq_default_instance_;
class SearchOnSaleGoodsRsq;
struct SearchOnSaleGoodsRsqDefaultTypeInternal;
extern SearchOnSaleGoodsRsqDefaultTypeInternal _SearchOnSaleGoodsRsq_default_instance_;
class SearchOnSaleGoodsRsq_goods;
struct SearchOnSaleGoodsRsq_goodsDefaultTypeInternal;
extern SearchOnSaleGoodsRsq_goodsDefaultTypeInternal _SearchOnSaleGoodsRsq_goods_default_instance_;
}  // namespace myApplication
PROTOBUF_NAMESPACE_OPEN
template<> ::myApplication::ListSpecialGoodReq* Arena::CreateMaybeMessage<::myApplication::ListSpecialGoodReq>(Arena*);
template<> ::myApplication::ListSpecialGoodRsq* Arena::CreateMaybeMessage<::myApplication::ListSpecialGoodRsq>(Arena*);
template<> ::myApplication::ListSpecialGoodRsq_goods* Arena::CreateMaybeMessage<::myApplication::ListSpecialGoodRsq_goods>(Arena*);
template<> ::myApplication::ManageTradesReq* Arena::CreateMaybeMessage<::myApplication::ManageTradesReq>(Arena*);
template<> ::myApplication::ManageTradesRsq* Arena::CreateMaybeMessage<::myApplication::ManageTradesRsq>(Arena*);
template<> ::myApplication::ManageTradesRsq_trade* Arena::CreateMaybeMessage<::myApplication::ManageTradesRsq_trade>(Arena*);
template<> ::myApplication::PurchaseReq* Arena::CreateMaybeMessage<::myApplication::PurchaseReq>(Arena*);
template<> ::myApplication::PurchaseRsq* Arena::CreateMaybeMessage<::myApplication::PurchaseRsq>(Arena*);
template<> ::myApplication::SaleReq* Arena::CreateMaybeMessage<::myApplication::SaleReq>(Arena*);
template<> ::myApplication::SaleRsq* Arena::CreateMaybeMessage<::myApplication::SaleRsq>(Arena*);
template<> ::myApplication::SearchOnSaleGoodsReq* Arena::CreateMaybeMessage<::myApplication::SearchOnSaleGoodsReq>(Arena*);
template<> ::myApplication::SearchOnSaleGoodsRsq* Arena::CreateMaybeMessage<::myApplication::SearchOnSaleGoodsRsq>(Arena*);
template<> ::myApplication::SearchOnSaleGoodsRsq_goods* Arena::CreateMaybeMessage<::myApplication::SearchOnSaleGoodsRsq_goods>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace myApplication {

// ===================================================================

class SearchOnSaleGoodsReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myApplication.SearchOnSaleGoodsReq) */ {
 public:
  inline SearchOnSaleGoodsReq() : SearchOnSaleGoodsReq(nullptr) {}
  ~SearchOnSaleGoodsReq() override;
  explicit constexpr SearchOnSaleGoodsReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchOnSaleGoodsReq(const SearchOnSaleGoodsReq& from);
  SearchOnSaleGoodsReq(SearchOnSaleGoodsReq&& from) noexcept
    : SearchOnSaleGoodsReq() {
    *this = ::std::move(from);
  }

  inline SearchOnSaleGoodsReq& operator=(const SearchOnSaleGoodsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchOnSaleGoodsReq& operator=(SearchOnSaleGoodsReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchOnSaleGoodsReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchOnSaleGoodsReq* internal_default_instance() {
    return reinterpret_cast<const SearchOnSaleGoodsReq*>(
               &_SearchOnSaleGoodsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SearchOnSaleGoodsReq& a, SearchOnSaleGoodsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchOnSaleGoodsReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchOnSaleGoodsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchOnSaleGoodsReq* New() const final {
    return new SearchOnSaleGoodsReq();
  }

  SearchOnSaleGoodsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchOnSaleGoodsReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchOnSaleGoodsReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchOnSaleGoodsReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchOnSaleGoodsReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myApplication.SearchOnSaleGoodsReq";
  }
  protected:
  explicit SearchOnSaleGoodsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodNameFieldNumber = 1,
  };
  // string goodName = 1;
  void clear_goodname();
  const std::string& goodname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_goodname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_goodname();
  PROTOBUF_MUST_USE_RESULT std::string* release_goodname();
  void set_allocated_goodname(std::string* goodname);
  private:
  const std::string& _internal_goodname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_goodname(const std::string& value);
  std::string* _internal_mutable_goodname();
  public:

  // @@protoc_insertion_point(class_scope:myApplication.SearchOnSaleGoodsReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr goodname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MallService_2eproto;
};
// -------------------------------------------------------------------

class SearchOnSaleGoodsRsq_goods final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myApplication.SearchOnSaleGoodsRsq.goods) */ {
 public:
  inline SearchOnSaleGoodsRsq_goods() : SearchOnSaleGoodsRsq_goods(nullptr) {}
  ~SearchOnSaleGoodsRsq_goods() override;
  explicit constexpr SearchOnSaleGoodsRsq_goods(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchOnSaleGoodsRsq_goods(const SearchOnSaleGoodsRsq_goods& from);
  SearchOnSaleGoodsRsq_goods(SearchOnSaleGoodsRsq_goods&& from) noexcept
    : SearchOnSaleGoodsRsq_goods() {
    *this = ::std::move(from);
  }

  inline SearchOnSaleGoodsRsq_goods& operator=(const SearchOnSaleGoodsRsq_goods& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchOnSaleGoodsRsq_goods& operator=(SearchOnSaleGoodsRsq_goods&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchOnSaleGoodsRsq_goods& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchOnSaleGoodsRsq_goods* internal_default_instance() {
    return reinterpret_cast<const SearchOnSaleGoodsRsq_goods*>(
               &_SearchOnSaleGoodsRsq_goods_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SearchOnSaleGoodsRsq_goods& a, SearchOnSaleGoodsRsq_goods& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchOnSaleGoodsRsq_goods* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchOnSaleGoodsRsq_goods* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchOnSaleGoodsRsq_goods* New() const final {
    return new SearchOnSaleGoodsRsq_goods();
  }

  SearchOnSaleGoodsRsq_goods* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchOnSaleGoodsRsq_goods>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchOnSaleGoodsRsq_goods& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchOnSaleGoodsRsq_goods& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchOnSaleGoodsRsq_goods* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myApplication.SearchOnSaleGoodsRsq.goods";
  }
  protected:
  explicit SearchOnSaleGoodsRsq_goods(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodnameFieldNumber = 2,
    kGoodidFieldNumber = 1,
    kTradeAmountFieldNumber = 3,
    kUseridFieldNumber = 4,
    kNumFieldNumber = 5,
    kStoreidFieldNumber = 6,
  };
  // string goodname = 2;
  void clear_goodname();
  const std::string& goodname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_goodname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_goodname();
  PROTOBUF_MUST_USE_RESULT std::string* release_goodname();
  void set_allocated_goodname(std::string* goodname);
  private:
  const std::string& _internal_goodname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_goodname(const std::string& value);
  std::string* _internal_mutable_goodname();
  public:

  // int64 goodid = 1;
  void clear_goodid();
  ::PROTOBUF_NAMESPACE_ID::int64 goodid() const;
  void set_goodid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_goodid() const;
  void _internal_set_goodid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 tradeAmount = 3;
  void clear_tradeamount();
  ::PROTOBUF_NAMESPACE_ID::int64 tradeamount() const;
  void set_tradeamount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tradeamount() const;
  void _internal_set_tradeamount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 userid = 4;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 num = 5;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int64 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 storeid = 6;
  void clear_storeid();
  ::PROTOBUF_NAMESPACE_ID::int64 storeid() const;
  void set_storeid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_storeid() const;
  void _internal_set_storeid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:myApplication.SearchOnSaleGoodsRsq.goods)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr goodname_;
  ::PROTOBUF_NAMESPACE_ID::int64 goodid_;
  ::PROTOBUF_NAMESPACE_ID::int64 tradeamount_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_;
  ::PROTOBUF_NAMESPACE_ID::int64 storeid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MallService_2eproto;
};
// -------------------------------------------------------------------

class SearchOnSaleGoodsRsq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myApplication.SearchOnSaleGoodsRsq) */ {
 public:
  inline SearchOnSaleGoodsRsq() : SearchOnSaleGoodsRsq(nullptr) {}
  ~SearchOnSaleGoodsRsq() override;
  explicit constexpr SearchOnSaleGoodsRsq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchOnSaleGoodsRsq(const SearchOnSaleGoodsRsq& from);
  SearchOnSaleGoodsRsq(SearchOnSaleGoodsRsq&& from) noexcept
    : SearchOnSaleGoodsRsq() {
    *this = ::std::move(from);
  }

  inline SearchOnSaleGoodsRsq& operator=(const SearchOnSaleGoodsRsq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchOnSaleGoodsRsq& operator=(SearchOnSaleGoodsRsq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchOnSaleGoodsRsq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchOnSaleGoodsRsq* internal_default_instance() {
    return reinterpret_cast<const SearchOnSaleGoodsRsq*>(
               &_SearchOnSaleGoodsRsq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SearchOnSaleGoodsRsq& a, SearchOnSaleGoodsRsq& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchOnSaleGoodsRsq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchOnSaleGoodsRsq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchOnSaleGoodsRsq* New() const final {
    return new SearchOnSaleGoodsRsq();
  }

  SearchOnSaleGoodsRsq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchOnSaleGoodsRsq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchOnSaleGoodsRsq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchOnSaleGoodsRsq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchOnSaleGoodsRsq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myApplication.SearchOnSaleGoodsRsq";
  }
  protected:
  explicit SearchOnSaleGoodsRsq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SearchOnSaleGoodsRsq_goods goods;

  // accessors -------------------------------------------------------

  enum : int {
    kGoodFieldNumber = 3,
    kMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .myApplication.SearchOnSaleGoodsRsq.goods good = 3;
  int good_size() const;
  private:
  int _internal_good_size() const;
  public:
  void clear_good();
  ::myApplication::SearchOnSaleGoodsRsq_goods* mutable_good(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myApplication::SearchOnSaleGoodsRsq_goods >*
      mutable_good();
  private:
  const ::myApplication::SearchOnSaleGoodsRsq_goods& _internal_good(int index) const;
  ::myApplication::SearchOnSaleGoodsRsq_goods* _internal_add_good();
  public:
  const ::myApplication::SearchOnSaleGoodsRsq_goods& good(int index) const;
  ::myApplication::SearchOnSaleGoodsRsq_goods* add_good();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myApplication::SearchOnSaleGoodsRsq_goods >&
      good() const;

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:myApplication.SearchOnSaleGoodsRsq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myApplication::SearchOnSaleGoodsRsq_goods > good_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MallService_2eproto;
};
// -------------------------------------------------------------------

class ListSpecialGoodReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myApplication.ListSpecialGoodReq) */ {
 public:
  inline ListSpecialGoodReq() : ListSpecialGoodReq(nullptr) {}
  ~ListSpecialGoodReq() override;
  explicit constexpr ListSpecialGoodReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSpecialGoodReq(const ListSpecialGoodReq& from);
  ListSpecialGoodReq(ListSpecialGoodReq&& from) noexcept
    : ListSpecialGoodReq() {
    *this = ::std::move(from);
  }

  inline ListSpecialGoodReq& operator=(const ListSpecialGoodReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSpecialGoodReq& operator=(ListSpecialGoodReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSpecialGoodReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSpecialGoodReq* internal_default_instance() {
    return reinterpret_cast<const ListSpecialGoodReq*>(
               &_ListSpecialGoodReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListSpecialGoodReq& a, ListSpecialGoodReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSpecialGoodReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSpecialGoodReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSpecialGoodReq* New() const final {
    return new ListSpecialGoodReq();
  }

  ListSpecialGoodReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSpecialGoodReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSpecialGoodReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListSpecialGoodReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSpecialGoodReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myApplication.ListSpecialGoodReq";
  }
  protected:
  explicit ListSpecialGoodReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecailNumFieldNumber = 1,
  };
  // int32 SpecailNum = 1;
  void clear_specailnum();
  ::PROTOBUF_NAMESPACE_ID::int32 specailnum() const;
  void set_specailnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_specailnum() const;
  void _internal_set_specailnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:myApplication.ListSpecialGoodReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 specailnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MallService_2eproto;
};
// -------------------------------------------------------------------

class ListSpecialGoodRsq_goods final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myApplication.ListSpecialGoodRsq.goods) */ {
 public:
  inline ListSpecialGoodRsq_goods() : ListSpecialGoodRsq_goods(nullptr) {}
  ~ListSpecialGoodRsq_goods() override;
  explicit constexpr ListSpecialGoodRsq_goods(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSpecialGoodRsq_goods(const ListSpecialGoodRsq_goods& from);
  ListSpecialGoodRsq_goods(ListSpecialGoodRsq_goods&& from) noexcept
    : ListSpecialGoodRsq_goods() {
    *this = ::std::move(from);
  }

  inline ListSpecialGoodRsq_goods& operator=(const ListSpecialGoodRsq_goods& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSpecialGoodRsq_goods& operator=(ListSpecialGoodRsq_goods&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSpecialGoodRsq_goods& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSpecialGoodRsq_goods* internal_default_instance() {
    return reinterpret_cast<const ListSpecialGoodRsq_goods*>(
               &_ListSpecialGoodRsq_goods_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListSpecialGoodRsq_goods& a, ListSpecialGoodRsq_goods& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSpecialGoodRsq_goods* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSpecialGoodRsq_goods* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSpecialGoodRsq_goods* New() const final {
    return new ListSpecialGoodRsq_goods();
  }

  ListSpecialGoodRsq_goods* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSpecialGoodRsq_goods>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSpecialGoodRsq_goods& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListSpecialGoodRsq_goods& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSpecialGoodRsq_goods* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myApplication.ListSpecialGoodRsq.goods";
  }
  protected:
  explicit ListSpecialGoodRsq_goods(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodnameFieldNumber = 2,
    kGoodidFieldNumber = 1,
    kTradeAmountFieldNumber = 3,
    kUseridFieldNumber = 4,
  };
  // string goodname = 2;
  void clear_goodname();
  const std::string& goodname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_goodname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_goodname();
  PROTOBUF_MUST_USE_RESULT std::string* release_goodname();
  void set_allocated_goodname(std::string* goodname);
  private:
  const std::string& _internal_goodname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_goodname(const std::string& value);
  std::string* _internal_mutable_goodname();
  public:

  // int64 goodid = 1;
  void clear_goodid();
  ::PROTOBUF_NAMESPACE_ID::int64 goodid() const;
  void set_goodid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_goodid() const;
  void _internal_set_goodid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 tradeAmount = 3;
  void clear_tradeamount();
  ::PROTOBUF_NAMESPACE_ID::int64 tradeamount() const;
  void set_tradeamount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tradeamount() const;
  void _internal_set_tradeamount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 userid = 4;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:myApplication.ListSpecialGoodRsq.goods)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr goodname_;
  ::PROTOBUF_NAMESPACE_ID::int64 goodid_;
  ::PROTOBUF_NAMESPACE_ID::int64 tradeamount_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MallService_2eproto;
};
// -------------------------------------------------------------------

class ListSpecialGoodRsq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myApplication.ListSpecialGoodRsq) */ {
 public:
  inline ListSpecialGoodRsq() : ListSpecialGoodRsq(nullptr) {}
  ~ListSpecialGoodRsq() override;
  explicit constexpr ListSpecialGoodRsq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSpecialGoodRsq(const ListSpecialGoodRsq& from);
  ListSpecialGoodRsq(ListSpecialGoodRsq&& from) noexcept
    : ListSpecialGoodRsq() {
    *this = ::std::move(from);
  }

  inline ListSpecialGoodRsq& operator=(const ListSpecialGoodRsq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSpecialGoodRsq& operator=(ListSpecialGoodRsq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListSpecialGoodRsq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSpecialGoodRsq* internal_default_instance() {
    return reinterpret_cast<const ListSpecialGoodRsq*>(
               &_ListSpecialGoodRsq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListSpecialGoodRsq& a, ListSpecialGoodRsq& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSpecialGoodRsq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSpecialGoodRsq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSpecialGoodRsq* New() const final {
    return new ListSpecialGoodRsq();
  }

  ListSpecialGoodRsq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSpecialGoodRsq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListSpecialGoodRsq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListSpecialGoodRsq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSpecialGoodRsq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myApplication.ListSpecialGoodRsq";
  }
  protected:
  explicit ListSpecialGoodRsq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ListSpecialGoodRsq_goods goods;

  // accessors -------------------------------------------------------

  enum : int {
    kGoodFieldNumber = 3,
    kMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .myApplication.ListSpecialGoodRsq.goods good = 3;
  int good_size() const;
  private:
  int _internal_good_size() const;
  public:
  void clear_good();
  ::myApplication::ListSpecialGoodRsq_goods* mutable_good(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myApplication::ListSpecialGoodRsq_goods >*
      mutable_good();
  private:
  const ::myApplication::ListSpecialGoodRsq_goods& _internal_good(int index) const;
  ::myApplication::ListSpecialGoodRsq_goods* _internal_add_good();
  public:
  const ::myApplication::ListSpecialGoodRsq_goods& good(int index) const;
  ::myApplication::ListSpecialGoodRsq_goods* add_good();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myApplication::ListSpecialGoodRsq_goods >&
      good() const;

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:myApplication.ListSpecialGoodRsq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myApplication::ListSpecialGoodRsq_goods > good_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MallService_2eproto;
};
// -------------------------------------------------------------------

class PurchaseReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myApplication.PurchaseReq) */ {
 public:
  inline PurchaseReq() : PurchaseReq(nullptr) {}
  ~PurchaseReq() override;
  explicit constexpr PurchaseReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PurchaseReq(const PurchaseReq& from);
  PurchaseReq(PurchaseReq&& from) noexcept
    : PurchaseReq() {
    *this = ::std::move(from);
  }

  inline PurchaseReq& operator=(const PurchaseReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PurchaseReq& operator=(PurchaseReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PurchaseReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const PurchaseReq* internal_default_instance() {
    return reinterpret_cast<const PurchaseReq*>(
               &_PurchaseReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PurchaseReq& a, PurchaseReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PurchaseReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PurchaseReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PurchaseReq* New() const final {
    return new PurchaseReq();
  }

  PurchaseReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PurchaseReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PurchaseReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PurchaseReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PurchaseReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myApplication.PurchaseReq";
  }
  protected:
  explicit PurchaseReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodidFieldNumber = 1,
    kMoneyFieldNumber = 2,
    kIdFieldNumber = 3,
    kNumFieldNumber = 4,
    kSaleridFieldNumber = 6,
    kGoodSpecialFieldNumber = 5,
  };
  // int64 goodid = 1;
  void clear_goodid();
  ::PROTOBUF_NAMESPACE_ID::int64 goodid() const;
  void set_goodid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_goodid() const;
  void _internal_set_goodid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 money = 2;
  void clear_money();
  ::PROTOBUF_NAMESPACE_ID::int64 money() const;
  void set_money(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_money() const;
  void _internal_set_money(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 num = 4;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int64 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 salerid = 6;
  void clear_salerid();
  ::PROTOBUF_NAMESPACE_ID::int64 salerid() const;
  void set_salerid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_salerid() const;
  void _internal_set_salerid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 goodSpecial = 5;
  void clear_goodspecial();
  ::PROTOBUF_NAMESPACE_ID::int32 goodspecial() const;
  void set_goodspecial(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodspecial() const;
  void _internal_set_goodspecial(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:myApplication.PurchaseReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 goodid_;
  ::PROTOBUF_NAMESPACE_ID::int64 money_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_;
  ::PROTOBUF_NAMESPACE_ID::int64 salerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodspecial_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MallService_2eproto;
};
// -------------------------------------------------------------------

class PurchaseRsq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myApplication.PurchaseRsq) */ {
 public:
  inline PurchaseRsq() : PurchaseRsq(nullptr) {}
  ~PurchaseRsq() override;
  explicit constexpr PurchaseRsq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PurchaseRsq(const PurchaseRsq& from);
  PurchaseRsq(PurchaseRsq&& from) noexcept
    : PurchaseRsq() {
    *this = ::std::move(from);
  }

  inline PurchaseRsq& operator=(const PurchaseRsq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PurchaseRsq& operator=(PurchaseRsq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PurchaseRsq& default_instance() {
    return *internal_default_instance();
  }
  static inline const PurchaseRsq* internal_default_instance() {
    return reinterpret_cast<const PurchaseRsq*>(
               &_PurchaseRsq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PurchaseRsq& a, PurchaseRsq& b) {
    a.Swap(&b);
  }
  inline void Swap(PurchaseRsq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PurchaseRsq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PurchaseRsq* New() const final {
    return new PurchaseRsq();
  }

  PurchaseRsq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PurchaseRsq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PurchaseRsq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PurchaseRsq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PurchaseRsq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myApplication.PurchaseRsq";
  }
  protected:
  explicit PurchaseRsq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:myApplication.PurchaseRsq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MallService_2eproto;
};
// -------------------------------------------------------------------

class ManageTradesReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myApplication.ManageTradesReq) */ {
 public:
  inline ManageTradesReq() : ManageTradesReq(nullptr) {}
  ~ManageTradesReq() override;
  explicit constexpr ManageTradesReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ManageTradesReq(const ManageTradesReq& from);
  ManageTradesReq(ManageTradesReq&& from) noexcept
    : ManageTradesReq() {
    *this = ::std::move(from);
  }

  inline ManageTradesReq& operator=(const ManageTradesReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManageTradesReq& operator=(ManageTradesReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ManageTradesReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ManageTradesReq* internal_default_instance() {
    return reinterpret_cast<const ManageTradesReq*>(
               &_ManageTradesReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ManageTradesReq& a, ManageTradesReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ManageTradesReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ManageTradesReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ManageTradesReq* New() const final {
    return new ManageTradesReq();
  }

  ManageTradesReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ManageTradesReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ManageTradesReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ManageTradesReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManageTradesReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myApplication.ManageTradesReq";
  }
  protected:
  explicit ManageTradesReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
    kGoodidFieldNumber = 2,
  };
  // int64 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 goodid = 2;
  bool has_goodid() const;
  private:
  bool _internal_has_goodid() const;
  public:
  void clear_goodid();
  ::PROTOBUF_NAMESPACE_ID::int64 goodid() const;
  void set_goodid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_goodid() const;
  void _internal_set_goodid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:myApplication.ManageTradesReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  ::PROTOBUF_NAMESPACE_ID::int64 goodid_;
  friend struct ::TableStruct_MallService_2eproto;
};
// -------------------------------------------------------------------

class ManageTradesRsq_trade final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myApplication.ManageTradesRsq.trade) */ {
 public:
  inline ManageTradesRsq_trade() : ManageTradesRsq_trade(nullptr) {}
  ~ManageTradesRsq_trade() override;
  explicit constexpr ManageTradesRsq_trade(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ManageTradesRsq_trade(const ManageTradesRsq_trade& from);
  ManageTradesRsq_trade(ManageTradesRsq_trade&& from) noexcept
    : ManageTradesRsq_trade() {
    *this = ::std::move(from);
  }

  inline ManageTradesRsq_trade& operator=(const ManageTradesRsq_trade& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManageTradesRsq_trade& operator=(ManageTradesRsq_trade&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ManageTradesRsq_trade& default_instance() {
    return *internal_default_instance();
  }
  static inline const ManageTradesRsq_trade* internal_default_instance() {
    return reinterpret_cast<const ManageTradesRsq_trade*>(
               &_ManageTradesRsq_trade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ManageTradesRsq_trade& a, ManageTradesRsq_trade& b) {
    a.Swap(&b);
  }
  inline void Swap(ManageTradesRsq_trade* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ManageTradesRsq_trade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ManageTradesRsq_trade* New() const final {
    return new ManageTradesRsq_trade();
  }

  ManageTradesRsq_trade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ManageTradesRsq_trade>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ManageTradesRsq_trade& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ManageTradesRsq_trade& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManageTradesRsq_trade* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myApplication.ManageTradesRsq.trade";
  }
  protected:
  explicit ManageTradesRsq_trade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeTimeFieldNumber = 5,
    kTradeidFieldNumber = 1,
    kGoodidFieldNumber = 3,
    kUseridFieldNumber = 4,
    kTradeMoneyFieldNumber = 6,
    kKindFieldNumber = 2,
  };
  // string tradeTime = 5;
  void clear_tradetime();
  const std::string& tradetime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradetime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradetime();
  PROTOBUF_MUST_USE_RESULT std::string* release_tradetime();
  void set_allocated_tradetime(std::string* tradetime);
  private:
  const std::string& _internal_tradetime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradetime(const std::string& value);
  std::string* _internal_mutable_tradetime();
  public:

  // int64 tradeid = 1;
  void clear_tradeid();
  ::PROTOBUF_NAMESPACE_ID::int64 tradeid() const;
  void set_tradeid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tradeid() const;
  void _internal_set_tradeid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 goodid = 3;
  void clear_goodid();
  ::PROTOBUF_NAMESPACE_ID::int64 goodid() const;
  void set_goodid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_goodid() const;
  void _internal_set_goodid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 userid = 4;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 tradeMoney = 6;
  void clear_trademoney();
  ::PROTOBUF_NAMESPACE_ID::int64 trademoney() const;
  void set_trademoney(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_trademoney() const;
  void _internal_set_trademoney(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 kind = 2;
  void clear_kind();
  ::PROTOBUF_NAMESPACE_ID::int32 kind() const;
  void set_kind(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_kind() const;
  void _internal_set_kind(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:myApplication.ManageTradesRsq.trade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradetime_;
  ::PROTOBUF_NAMESPACE_ID::int64 tradeid_;
  ::PROTOBUF_NAMESPACE_ID::int64 goodid_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  ::PROTOBUF_NAMESPACE_ID::int64 trademoney_;
  ::PROTOBUF_NAMESPACE_ID::int32 kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MallService_2eproto;
};
// -------------------------------------------------------------------

class ManageTradesRsq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myApplication.ManageTradesRsq) */ {
 public:
  inline ManageTradesRsq() : ManageTradesRsq(nullptr) {}
  ~ManageTradesRsq() override;
  explicit constexpr ManageTradesRsq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ManageTradesRsq(const ManageTradesRsq& from);
  ManageTradesRsq(ManageTradesRsq&& from) noexcept
    : ManageTradesRsq() {
    *this = ::std::move(from);
  }

  inline ManageTradesRsq& operator=(const ManageTradesRsq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManageTradesRsq& operator=(ManageTradesRsq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ManageTradesRsq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ManageTradesRsq* internal_default_instance() {
    return reinterpret_cast<const ManageTradesRsq*>(
               &_ManageTradesRsq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ManageTradesRsq& a, ManageTradesRsq& b) {
    a.Swap(&b);
  }
  inline void Swap(ManageTradesRsq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ManageTradesRsq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ManageTradesRsq* New() const final {
    return new ManageTradesRsq();
  }

  ManageTradesRsq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ManageTradesRsq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ManageTradesRsq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ManageTradesRsq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManageTradesRsq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myApplication.ManageTradesRsq";
  }
  protected:
  explicit ManageTradesRsq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ManageTradesRsq_trade trade;

  // accessors -------------------------------------------------------

  enum : int {
    kTradesFieldNumber = 3,
    kMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .myApplication.ManageTradesRsq.trade trades = 3;
  int trades_size() const;
  private:
  int _internal_trades_size() const;
  public:
  void clear_trades();
  ::myApplication::ManageTradesRsq_trade* mutable_trades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myApplication::ManageTradesRsq_trade >*
      mutable_trades();
  private:
  const ::myApplication::ManageTradesRsq_trade& _internal_trades(int index) const;
  ::myApplication::ManageTradesRsq_trade* _internal_add_trades();
  public:
  const ::myApplication::ManageTradesRsq_trade& trades(int index) const;
  ::myApplication::ManageTradesRsq_trade* add_trades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myApplication::ManageTradesRsq_trade >&
      trades() const;

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:myApplication.ManageTradesRsq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myApplication::ManageTradesRsq_trade > trades_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MallService_2eproto;
};
// -------------------------------------------------------------------

class SaleReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myApplication.SaleReq) */ {
 public:
  inline SaleReq() : SaleReq(nullptr) {}
  ~SaleReq() override;
  explicit constexpr SaleReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SaleReq(const SaleReq& from);
  SaleReq(SaleReq&& from) noexcept
    : SaleReq() {
    *this = ::std::move(from);
  }

  inline SaleReq& operator=(const SaleReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaleReq& operator=(SaleReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaleReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaleReq* internal_default_instance() {
    return reinterpret_cast<const SaleReq*>(
               &_SaleReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SaleReq& a, SaleReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SaleReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaleReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaleReq* New() const final {
    return new SaleReq();
  }

  SaleReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaleReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SaleReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SaleReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaleReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myApplication.SaleReq";
  }
  protected:
  explicit SaleReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodidFieldNumber = 1,
    kMoneyFieldNumber = 2,
    kIdFieldNumber = 3,
    kNumFieldNumber = 5,
    kKindFieldNumber = 4,
    kGoodSpecialFieldNumber = 6,
  };
  // int64 goodid = 1;
  void clear_goodid();
  ::PROTOBUF_NAMESPACE_ID::int64 goodid() const;
  void set_goodid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_goodid() const;
  void _internal_set_goodid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 money = 2;
  void clear_money();
  ::PROTOBUF_NAMESPACE_ID::int64 money() const;
  void set_money(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_money() const;
  void _internal_set_money(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 num = 5;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int64 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 kind = 4;
  void clear_kind();
  ::PROTOBUF_NAMESPACE_ID::int32 kind() const;
  void set_kind(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_kind() const;
  void _internal_set_kind(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 goodSpecial = 6;
  void clear_goodspecial();
  ::PROTOBUF_NAMESPACE_ID::int32 goodspecial() const;
  void set_goodspecial(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodspecial() const;
  void _internal_set_goodspecial(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:myApplication.SaleReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 goodid_;
  ::PROTOBUF_NAMESPACE_ID::int64 money_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 kind_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodspecial_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MallService_2eproto;
};
// -------------------------------------------------------------------

class SaleRsq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myApplication.SaleRsq) */ {
 public:
  inline SaleRsq() : SaleRsq(nullptr) {}
  ~SaleRsq() override;
  explicit constexpr SaleRsq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SaleRsq(const SaleRsq& from);
  SaleRsq(SaleRsq&& from) noexcept
    : SaleRsq() {
    *this = ::std::move(from);
  }

  inline SaleRsq& operator=(const SaleRsq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaleRsq& operator=(SaleRsq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaleRsq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaleRsq* internal_default_instance() {
    return reinterpret_cast<const SaleRsq*>(
               &_SaleRsq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SaleRsq& a, SaleRsq& b) {
    a.Swap(&b);
  }
  inline void Swap(SaleRsq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaleRsq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaleRsq* New() const final {
    return new SaleRsq();
  }

  SaleRsq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaleRsq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SaleRsq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SaleRsq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaleRsq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myApplication.SaleRsq";
  }
  protected:
  explicit SaleRsq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:myApplication.SaleRsq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MallService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SearchOnSaleGoodsReq

// string goodName = 1;
inline void SearchOnSaleGoodsReq::clear_goodname() {
  goodname_.ClearToEmpty();
}
inline const std::string& SearchOnSaleGoodsReq::goodname() const {
  // @@protoc_insertion_point(field_get:myApplication.SearchOnSaleGoodsReq.goodName)
  return _internal_goodname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchOnSaleGoodsReq::set_goodname(ArgT0&& arg0, ArgT... args) {
 
 goodname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:myApplication.SearchOnSaleGoodsReq.goodName)
}
inline std::string* SearchOnSaleGoodsReq::mutable_goodname() {
  std::string* _s = _internal_mutable_goodname();
  // @@protoc_insertion_point(field_mutable:myApplication.SearchOnSaleGoodsReq.goodName)
  return _s;
}
inline const std::string& SearchOnSaleGoodsReq::_internal_goodname() const {
  return goodname_.Get();
}
inline void SearchOnSaleGoodsReq::_internal_set_goodname(const std::string& value) {
  
  goodname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchOnSaleGoodsReq::_internal_mutable_goodname() {
  
  return goodname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchOnSaleGoodsReq::release_goodname() {
  // @@protoc_insertion_point(field_release:myApplication.SearchOnSaleGoodsReq.goodName)
  return goodname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchOnSaleGoodsReq::set_allocated_goodname(std::string* goodname) {
  if (goodname != nullptr) {
    
  } else {
    
  }
  goodname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), goodname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:myApplication.SearchOnSaleGoodsReq.goodName)
}

// -------------------------------------------------------------------

// SearchOnSaleGoodsRsq_goods

// int64 goodid = 1;
inline void SearchOnSaleGoodsRsq_goods::clear_goodid() {
  goodid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SearchOnSaleGoodsRsq_goods::_internal_goodid() const {
  return goodid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SearchOnSaleGoodsRsq_goods::goodid() const {
  // @@protoc_insertion_point(field_get:myApplication.SearchOnSaleGoodsRsq.goods.goodid)
  return _internal_goodid();
}
inline void SearchOnSaleGoodsRsq_goods::_internal_set_goodid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  goodid_ = value;
}
inline void SearchOnSaleGoodsRsq_goods::set_goodid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_goodid(value);
  // @@protoc_insertion_point(field_set:myApplication.SearchOnSaleGoodsRsq.goods.goodid)
}

// string goodname = 2;
inline void SearchOnSaleGoodsRsq_goods::clear_goodname() {
  goodname_.ClearToEmpty();
}
inline const std::string& SearchOnSaleGoodsRsq_goods::goodname() const {
  // @@protoc_insertion_point(field_get:myApplication.SearchOnSaleGoodsRsq.goods.goodname)
  return _internal_goodname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchOnSaleGoodsRsq_goods::set_goodname(ArgT0&& arg0, ArgT... args) {
 
 goodname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:myApplication.SearchOnSaleGoodsRsq.goods.goodname)
}
inline std::string* SearchOnSaleGoodsRsq_goods::mutable_goodname() {
  std::string* _s = _internal_mutable_goodname();
  // @@protoc_insertion_point(field_mutable:myApplication.SearchOnSaleGoodsRsq.goods.goodname)
  return _s;
}
inline const std::string& SearchOnSaleGoodsRsq_goods::_internal_goodname() const {
  return goodname_.Get();
}
inline void SearchOnSaleGoodsRsq_goods::_internal_set_goodname(const std::string& value) {
  
  goodname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchOnSaleGoodsRsq_goods::_internal_mutable_goodname() {
  
  return goodname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchOnSaleGoodsRsq_goods::release_goodname() {
  // @@protoc_insertion_point(field_release:myApplication.SearchOnSaleGoodsRsq.goods.goodname)
  return goodname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchOnSaleGoodsRsq_goods::set_allocated_goodname(std::string* goodname) {
  if (goodname != nullptr) {
    
  } else {
    
  }
  goodname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), goodname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:myApplication.SearchOnSaleGoodsRsq.goods.goodname)
}

// int64 tradeAmount = 3;
inline void SearchOnSaleGoodsRsq_goods::clear_tradeamount() {
  tradeamount_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SearchOnSaleGoodsRsq_goods::_internal_tradeamount() const {
  return tradeamount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SearchOnSaleGoodsRsq_goods::tradeamount() const {
  // @@protoc_insertion_point(field_get:myApplication.SearchOnSaleGoodsRsq.goods.tradeAmount)
  return _internal_tradeamount();
}
inline void SearchOnSaleGoodsRsq_goods::_internal_set_tradeamount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tradeamount_ = value;
}
inline void SearchOnSaleGoodsRsq_goods::set_tradeamount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tradeamount(value);
  // @@protoc_insertion_point(field_set:myApplication.SearchOnSaleGoodsRsq.goods.tradeAmount)
}

// int64 userid = 4;
inline void SearchOnSaleGoodsRsq_goods::clear_userid() {
  userid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SearchOnSaleGoodsRsq_goods::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SearchOnSaleGoodsRsq_goods::userid() const {
  // @@protoc_insertion_point(field_get:myApplication.SearchOnSaleGoodsRsq.goods.userid)
  return _internal_userid();
}
inline void SearchOnSaleGoodsRsq_goods::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  userid_ = value;
}
inline void SearchOnSaleGoodsRsq_goods::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:myApplication.SearchOnSaleGoodsRsq.goods.userid)
}

// int64 num = 5;
inline void SearchOnSaleGoodsRsq_goods::clear_num() {
  num_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SearchOnSaleGoodsRsq_goods::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SearchOnSaleGoodsRsq_goods::num() const {
  // @@protoc_insertion_point(field_get:myApplication.SearchOnSaleGoodsRsq.goods.num)
  return _internal_num();
}
inline void SearchOnSaleGoodsRsq_goods::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_ = value;
}
inline void SearchOnSaleGoodsRsq_goods::set_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:myApplication.SearchOnSaleGoodsRsq.goods.num)
}

// int64 storeid = 6;
inline void SearchOnSaleGoodsRsq_goods::clear_storeid() {
  storeid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SearchOnSaleGoodsRsq_goods::_internal_storeid() const {
  return storeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SearchOnSaleGoodsRsq_goods::storeid() const {
  // @@protoc_insertion_point(field_get:myApplication.SearchOnSaleGoodsRsq.goods.storeid)
  return _internal_storeid();
}
inline void SearchOnSaleGoodsRsq_goods::_internal_set_storeid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  storeid_ = value;
}
inline void SearchOnSaleGoodsRsq_goods::set_storeid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_storeid(value);
  // @@protoc_insertion_point(field_set:myApplication.SearchOnSaleGoodsRsq.goods.storeid)
}

// -------------------------------------------------------------------

// SearchOnSaleGoodsRsq

// int32 status = 1;
inline void SearchOnSaleGoodsRsq::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchOnSaleGoodsRsq::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchOnSaleGoodsRsq::status() const {
  // @@protoc_insertion_point(field_get:myApplication.SearchOnSaleGoodsRsq.status)
  return _internal_status();
}
inline void SearchOnSaleGoodsRsq::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SearchOnSaleGoodsRsq::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:myApplication.SearchOnSaleGoodsRsq.status)
}

// string message = 2;
inline void SearchOnSaleGoodsRsq::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& SearchOnSaleGoodsRsq::message() const {
  // @@protoc_insertion_point(field_get:myApplication.SearchOnSaleGoodsRsq.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchOnSaleGoodsRsq::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:myApplication.SearchOnSaleGoodsRsq.message)
}
inline std::string* SearchOnSaleGoodsRsq::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:myApplication.SearchOnSaleGoodsRsq.message)
  return _s;
}
inline const std::string& SearchOnSaleGoodsRsq::_internal_message() const {
  return message_.Get();
}
inline void SearchOnSaleGoodsRsq::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchOnSaleGoodsRsq::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchOnSaleGoodsRsq::release_message() {
  // @@protoc_insertion_point(field_release:myApplication.SearchOnSaleGoodsRsq.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchOnSaleGoodsRsq::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:myApplication.SearchOnSaleGoodsRsq.message)
}

// repeated .myApplication.SearchOnSaleGoodsRsq.goods good = 3;
inline int SearchOnSaleGoodsRsq::_internal_good_size() const {
  return good_.size();
}
inline int SearchOnSaleGoodsRsq::good_size() const {
  return _internal_good_size();
}
inline void SearchOnSaleGoodsRsq::clear_good() {
  good_.Clear();
}
inline ::myApplication::SearchOnSaleGoodsRsq_goods* SearchOnSaleGoodsRsq::mutable_good(int index) {
  // @@protoc_insertion_point(field_mutable:myApplication.SearchOnSaleGoodsRsq.good)
  return good_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myApplication::SearchOnSaleGoodsRsq_goods >*
SearchOnSaleGoodsRsq::mutable_good() {
  // @@protoc_insertion_point(field_mutable_list:myApplication.SearchOnSaleGoodsRsq.good)
  return &good_;
}
inline const ::myApplication::SearchOnSaleGoodsRsq_goods& SearchOnSaleGoodsRsq::_internal_good(int index) const {
  return good_.Get(index);
}
inline const ::myApplication::SearchOnSaleGoodsRsq_goods& SearchOnSaleGoodsRsq::good(int index) const {
  // @@protoc_insertion_point(field_get:myApplication.SearchOnSaleGoodsRsq.good)
  return _internal_good(index);
}
inline ::myApplication::SearchOnSaleGoodsRsq_goods* SearchOnSaleGoodsRsq::_internal_add_good() {
  return good_.Add();
}
inline ::myApplication::SearchOnSaleGoodsRsq_goods* SearchOnSaleGoodsRsq::add_good() {
  ::myApplication::SearchOnSaleGoodsRsq_goods* _add = _internal_add_good();
  // @@protoc_insertion_point(field_add:myApplication.SearchOnSaleGoodsRsq.good)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myApplication::SearchOnSaleGoodsRsq_goods >&
SearchOnSaleGoodsRsq::good() const {
  // @@protoc_insertion_point(field_list:myApplication.SearchOnSaleGoodsRsq.good)
  return good_;
}

// -------------------------------------------------------------------

// ListSpecialGoodReq

// int32 SpecailNum = 1;
inline void ListSpecialGoodReq::clear_specailnum() {
  specailnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListSpecialGoodReq::_internal_specailnum() const {
  return specailnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListSpecialGoodReq::specailnum() const {
  // @@protoc_insertion_point(field_get:myApplication.ListSpecialGoodReq.SpecailNum)
  return _internal_specailnum();
}
inline void ListSpecialGoodReq::_internal_set_specailnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  specailnum_ = value;
}
inline void ListSpecialGoodReq::set_specailnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_specailnum(value);
  // @@protoc_insertion_point(field_set:myApplication.ListSpecialGoodReq.SpecailNum)
}

// -------------------------------------------------------------------

// ListSpecialGoodRsq_goods

// int64 goodid = 1;
inline void ListSpecialGoodRsq_goods::clear_goodid() {
  goodid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListSpecialGoodRsq_goods::_internal_goodid() const {
  return goodid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListSpecialGoodRsq_goods::goodid() const {
  // @@protoc_insertion_point(field_get:myApplication.ListSpecialGoodRsq.goods.goodid)
  return _internal_goodid();
}
inline void ListSpecialGoodRsq_goods::_internal_set_goodid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  goodid_ = value;
}
inline void ListSpecialGoodRsq_goods::set_goodid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_goodid(value);
  // @@protoc_insertion_point(field_set:myApplication.ListSpecialGoodRsq.goods.goodid)
}

// string goodname = 2;
inline void ListSpecialGoodRsq_goods::clear_goodname() {
  goodname_.ClearToEmpty();
}
inline const std::string& ListSpecialGoodRsq_goods::goodname() const {
  // @@protoc_insertion_point(field_get:myApplication.ListSpecialGoodRsq.goods.goodname)
  return _internal_goodname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSpecialGoodRsq_goods::set_goodname(ArgT0&& arg0, ArgT... args) {
 
 goodname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:myApplication.ListSpecialGoodRsq.goods.goodname)
}
inline std::string* ListSpecialGoodRsq_goods::mutable_goodname() {
  std::string* _s = _internal_mutable_goodname();
  // @@protoc_insertion_point(field_mutable:myApplication.ListSpecialGoodRsq.goods.goodname)
  return _s;
}
inline const std::string& ListSpecialGoodRsq_goods::_internal_goodname() const {
  return goodname_.Get();
}
inline void ListSpecialGoodRsq_goods::_internal_set_goodname(const std::string& value) {
  
  goodname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListSpecialGoodRsq_goods::_internal_mutable_goodname() {
  
  return goodname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListSpecialGoodRsq_goods::release_goodname() {
  // @@protoc_insertion_point(field_release:myApplication.ListSpecialGoodRsq.goods.goodname)
  return goodname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListSpecialGoodRsq_goods::set_allocated_goodname(std::string* goodname) {
  if (goodname != nullptr) {
    
  } else {
    
  }
  goodname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), goodname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:myApplication.ListSpecialGoodRsq.goods.goodname)
}

// int64 tradeAmount = 3;
inline void ListSpecialGoodRsq_goods::clear_tradeamount() {
  tradeamount_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListSpecialGoodRsq_goods::_internal_tradeamount() const {
  return tradeamount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListSpecialGoodRsq_goods::tradeamount() const {
  // @@protoc_insertion_point(field_get:myApplication.ListSpecialGoodRsq.goods.tradeAmount)
  return _internal_tradeamount();
}
inline void ListSpecialGoodRsq_goods::_internal_set_tradeamount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tradeamount_ = value;
}
inline void ListSpecialGoodRsq_goods::set_tradeamount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tradeamount(value);
  // @@protoc_insertion_point(field_set:myApplication.ListSpecialGoodRsq.goods.tradeAmount)
}

// int64 userid = 4;
inline void ListSpecialGoodRsq_goods::clear_userid() {
  userid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListSpecialGoodRsq_goods::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListSpecialGoodRsq_goods::userid() const {
  // @@protoc_insertion_point(field_get:myApplication.ListSpecialGoodRsq.goods.userid)
  return _internal_userid();
}
inline void ListSpecialGoodRsq_goods::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  userid_ = value;
}
inline void ListSpecialGoodRsq_goods::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:myApplication.ListSpecialGoodRsq.goods.userid)
}

// -------------------------------------------------------------------

// ListSpecialGoodRsq

// int32 status = 1;
inline void ListSpecialGoodRsq::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListSpecialGoodRsq::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListSpecialGoodRsq::status() const {
  // @@protoc_insertion_point(field_get:myApplication.ListSpecialGoodRsq.status)
  return _internal_status();
}
inline void ListSpecialGoodRsq::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void ListSpecialGoodRsq::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:myApplication.ListSpecialGoodRsq.status)
}

// string message = 2;
inline void ListSpecialGoodRsq::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ListSpecialGoodRsq::message() const {
  // @@protoc_insertion_point(field_get:myApplication.ListSpecialGoodRsq.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListSpecialGoodRsq::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:myApplication.ListSpecialGoodRsq.message)
}
inline std::string* ListSpecialGoodRsq::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:myApplication.ListSpecialGoodRsq.message)
  return _s;
}
inline const std::string& ListSpecialGoodRsq::_internal_message() const {
  return message_.Get();
}
inline void ListSpecialGoodRsq::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListSpecialGoodRsq::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListSpecialGoodRsq::release_message() {
  // @@protoc_insertion_point(field_release:myApplication.ListSpecialGoodRsq.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListSpecialGoodRsq::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:myApplication.ListSpecialGoodRsq.message)
}

// repeated .myApplication.ListSpecialGoodRsq.goods good = 3;
inline int ListSpecialGoodRsq::_internal_good_size() const {
  return good_.size();
}
inline int ListSpecialGoodRsq::good_size() const {
  return _internal_good_size();
}
inline void ListSpecialGoodRsq::clear_good() {
  good_.Clear();
}
inline ::myApplication::ListSpecialGoodRsq_goods* ListSpecialGoodRsq::mutable_good(int index) {
  // @@protoc_insertion_point(field_mutable:myApplication.ListSpecialGoodRsq.good)
  return good_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myApplication::ListSpecialGoodRsq_goods >*
ListSpecialGoodRsq::mutable_good() {
  // @@protoc_insertion_point(field_mutable_list:myApplication.ListSpecialGoodRsq.good)
  return &good_;
}
inline const ::myApplication::ListSpecialGoodRsq_goods& ListSpecialGoodRsq::_internal_good(int index) const {
  return good_.Get(index);
}
inline const ::myApplication::ListSpecialGoodRsq_goods& ListSpecialGoodRsq::good(int index) const {
  // @@protoc_insertion_point(field_get:myApplication.ListSpecialGoodRsq.good)
  return _internal_good(index);
}
inline ::myApplication::ListSpecialGoodRsq_goods* ListSpecialGoodRsq::_internal_add_good() {
  return good_.Add();
}
inline ::myApplication::ListSpecialGoodRsq_goods* ListSpecialGoodRsq::add_good() {
  ::myApplication::ListSpecialGoodRsq_goods* _add = _internal_add_good();
  // @@protoc_insertion_point(field_add:myApplication.ListSpecialGoodRsq.good)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myApplication::ListSpecialGoodRsq_goods >&
ListSpecialGoodRsq::good() const {
  // @@protoc_insertion_point(field_list:myApplication.ListSpecialGoodRsq.good)
  return good_;
}

// -------------------------------------------------------------------

// PurchaseReq

// int64 goodid = 1;
inline void PurchaseReq::clear_goodid() {
  goodid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PurchaseReq::_internal_goodid() const {
  return goodid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PurchaseReq::goodid() const {
  // @@protoc_insertion_point(field_get:myApplication.PurchaseReq.goodid)
  return _internal_goodid();
}
inline void PurchaseReq::_internal_set_goodid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  goodid_ = value;
}
inline void PurchaseReq::set_goodid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_goodid(value);
  // @@protoc_insertion_point(field_set:myApplication.PurchaseReq.goodid)
}

// int64 money = 2;
inline void PurchaseReq::clear_money() {
  money_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PurchaseReq::_internal_money() const {
  return money_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PurchaseReq::money() const {
  // @@protoc_insertion_point(field_get:myApplication.PurchaseReq.money)
  return _internal_money();
}
inline void PurchaseReq::_internal_set_money(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  money_ = value;
}
inline void PurchaseReq::set_money(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:myApplication.PurchaseReq.money)
}

// int64 id = 3;
inline void PurchaseReq::clear_id() {
  id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PurchaseReq::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PurchaseReq::id() const {
  // @@protoc_insertion_point(field_get:myApplication.PurchaseReq.id)
  return _internal_id();
}
inline void PurchaseReq::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void PurchaseReq::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:myApplication.PurchaseReq.id)
}

// int64 num = 4;
inline void PurchaseReq::clear_num() {
  num_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PurchaseReq::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PurchaseReq::num() const {
  // @@protoc_insertion_point(field_get:myApplication.PurchaseReq.num)
  return _internal_num();
}
inline void PurchaseReq::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_ = value;
}
inline void PurchaseReq::set_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:myApplication.PurchaseReq.num)
}

// int32 goodSpecial = 5;
inline void PurchaseReq::clear_goodspecial() {
  goodspecial_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PurchaseReq::_internal_goodspecial() const {
  return goodspecial_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PurchaseReq::goodspecial() const {
  // @@protoc_insertion_point(field_get:myApplication.PurchaseReq.goodSpecial)
  return _internal_goodspecial();
}
inline void PurchaseReq::_internal_set_goodspecial(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodspecial_ = value;
}
inline void PurchaseReq::set_goodspecial(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodspecial(value);
  // @@protoc_insertion_point(field_set:myApplication.PurchaseReq.goodSpecial)
}

// int64 salerid = 6;
inline void PurchaseReq::clear_salerid() {
  salerid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PurchaseReq::_internal_salerid() const {
  return salerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PurchaseReq::salerid() const {
  // @@protoc_insertion_point(field_get:myApplication.PurchaseReq.salerid)
  return _internal_salerid();
}
inline void PurchaseReq::_internal_set_salerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  salerid_ = value;
}
inline void PurchaseReq::set_salerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_salerid(value);
  // @@protoc_insertion_point(field_set:myApplication.PurchaseReq.salerid)
}

// -------------------------------------------------------------------

// PurchaseRsq

// int32 status = 1;
inline void PurchaseRsq::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PurchaseRsq::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PurchaseRsq::status() const {
  // @@protoc_insertion_point(field_get:myApplication.PurchaseRsq.status)
  return _internal_status();
}
inline void PurchaseRsq::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void PurchaseRsq::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:myApplication.PurchaseRsq.status)
}

// string message = 2;
inline void PurchaseRsq::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& PurchaseRsq::message() const {
  // @@protoc_insertion_point(field_get:myApplication.PurchaseRsq.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PurchaseRsq::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:myApplication.PurchaseRsq.message)
}
inline std::string* PurchaseRsq::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:myApplication.PurchaseRsq.message)
  return _s;
}
inline const std::string& PurchaseRsq::_internal_message() const {
  return message_.Get();
}
inline void PurchaseRsq::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PurchaseRsq::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PurchaseRsq::release_message() {
  // @@protoc_insertion_point(field_release:myApplication.PurchaseRsq.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PurchaseRsq::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:myApplication.PurchaseRsq.message)
}

// -------------------------------------------------------------------

// ManageTradesReq

// int64 userid = 1;
inline void ManageTradesReq::clear_userid() {
  userid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ManageTradesReq::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ManageTradesReq::userid() const {
  // @@protoc_insertion_point(field_get:myApplication.ManageTradesReq.userid)
  return _internal_userid();
}
inline void ManageTradesReq::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  userid_ = value;
}
inline void ManageTradesReq::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:myApplication.ManageTradesReq.userid)
}

// optional int64 goodid = 2;
inline bool ManageTradesReq::_internal_has_goodid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ManageTradesReq::has_goodid() const {
  return _internal_has_goodid();
}
inline void ManageTradesReq::clear_goodid() {
  goodid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ManageTradesReq::_internal_goodid() const {
  return goodid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ManageTradesReq::goodid() const {
  // @@protoc_insertion_point(field_get:myApplication.ManageTradesReq.goodid)
  return _internal_goodid();
}
inline void ManageTradesReq::_internal_set_goodid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  goodid_ = value;
}
inline void ManageTradesReq::set_goodid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_goodid(value);
  // @@protoc_insertion_point(field_set:myApplication.ManageTradesReq.goodid)
}

// -------------------------------------------------------------------

// ManageTradesRsq_trade

// int64 tradeid = 1;
inline void ManageTradesRsq_trade::clear_tradeid() {
  tradeid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ManageTradesRsq_trade::_internal_tradeid() const {
  return tradeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ManageTradesRsq_trade::tradeid() const {
  // @@protoc_insertion_point(field_get:myApplication.ManageTradesRsq.trade.tradeid)
  return _internal_tradeid();
}
inline void ManageTradesRsq_trade::_internal_set_tradeid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tradeid_ = value;
}
inline void ManageTradesRsq_trade::set_tradeid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tradeid(value);
  // @@protoc_insertion_point(field_set:myApplication.ManageTradesRsq.trade.tradeid)
}

// int32 kind = 2;
inline void ManageTradesRsq_trade::clear_kind() {
  kind_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ManageTradesRsq_trade::_internal_kind() const {
  return kind_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ManageTradesRsq_trade::kind() const {
  // @@protoc_insertion_point(field_get:myApplication.ManageTradesRsq.trade.kind)
  return _internal_kind();
}
inline void ManageTradesRsq_trade::_internal_set_kind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  kind_ = value;
}
inline void ManageTradesRsq_trade::set_kind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:myApplication.ManageTradesRsq.trade.kind)
}

// int64 goodid = 3;
inline void ManageTradesRsq_trade::clear_goodid() {
  goodid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ManageTradesRsq_trade::_internal_goodid() const {
  return goodid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ManageTradesRsq_trade::goodid() const {
  // @@protoc_insertion_point(field_get:myApplication.ManageTradesRsq.trade.goodid)
  return _internal_goodid();
}
inline void ManageTradesRsq_trade::_internal_set_goodid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  goodid_ = value;
}
inline void ManageTradesRsq_trade::set_goodid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_goodid(value);
  // @@protoc_insertion_point(field_set:myApplication.ManageTradesRsq.trade.goodid)
}

// int64 userid = 4;
inline void ManageTradesRsq_trade::clear_userid() {
  userid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ManageTradesRsq_trade::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ManageTradesRsq_trade::userid() const {
  // @@protoc_insertion_point(field_get:myApplication.ManageTradesRsq.trade.userid)
  return _internal_userid();
}
inline void ManageTradesRsq_trade::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  userid_ = value;
}
inline void ManageTradesRsq_trade::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:myApplication.ManageTradesRsq.trade.userid)
}

// string tradeTime = 5;
inline void ManageTradesRsq_trade::clear_tradetime() {
  tradetime_.ClearToEmpty();
}
inline const std::string& ManageTradesRsq_trade::tradetime() const {
  // @@protoc_insertion_point(field_get:myApplication.ManageTradesRsq.trade.tradeTime)
  return _internal_tradetime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManageTradesRsq_trade::set_tradetime(ArgT0&& arg0, ArgT... args) {
 
 tradetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:myApplication.ManageTradesRsq.trade.tradeTime)
}
inline std::string* ManageTradesRsq_trade::mutable_tradetime() {
  std::string* _s = _internal_mutable_tradetime();
  // @@protoc_insertion_point(field_mutable:myApplication.ManageTradesRsq.trade.tradeTime)
  return _s;
}
inline const std::string& ManageTradesRsq_trade::_internal_tradetime() const {
  return tradetime_.Get();
}
inline void ManageTradesRsq_trade::_internal_set_tradetime(const std::string& value) {
  
  tradetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ManageTradesRsq_trade::_internal_mutable_tradetime() {
  
  return tradetime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ManageTradesRsq_trade::release_tradetime() {
  // @@protoc_insertion_point(field_release:myApplication.ManageTradesRsq.trade.tradeTime)
  return tradetime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ManageTradesRsq_trade::set_allocated_tradetime(std::string* tradetime) {
  if (tradetime != nullptr) {
    
  } else {
    
  }
  tradetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradetime,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:myApplication.ManageTradesRsq.trade.tradeTime)
}

// int64 tradeMoney = 6;
inline void ManageTradesRsq_trade::clear_trademoney() {
  trademoney_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ManageTradesRsq_trade::_internal_trademoney() const {
  return trademoney_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ManageTradesRsq_trade::trademoney() const {
  // @@protoc_insertion_point(field_get:myApplication.ManageTradesRsq.trade.tradeMoney)
  return _internal_trademoney();
}
inline void ManageTradesRsq_trade::_internal_set_trademoney(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  trademoney_ = value;
}
inline void ManageTradesRsq_trade::set_trademoney(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_trademoney(value);
  // @@protoc_insertion_point(field_set:myApplication.ManageTradesRsq.trade.tradeMoney)
}

// -------------------------------------------------------------------

// ManageTradesRsq

// int32 status = 1;
inline void ManageTradesRsq::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ManageTradesRsq::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ManageTradesRsq::status() const {
  // @@protoc_insertion_point(field_get:myApplication.ManageTradesRsq.status)
  return _internal_status();
}
inline void ManageTradesRsq::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void ManageTradesRsq::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:myApplication.ManageTradesRsq.status)
}

// string message = 2;
inline void ManageTradesRsq::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ManageTradesRsq::message() const {
  // @@protoc_insertion_point(field_get:myApplication.ManageTradesRsq.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManageTradesRsq::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:myApplication.ManageTradesRsq.message)
}
inline std::string* ManageTradesRsq::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:myApplication.ManageTradesRsq.message)
  return _s;
}
inline const std::string& ManageTradesRsq::_internal_message() const {
  return message_.Get();
}
inline void ManageTradesRsq::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ManageTradesRsq::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ManageTradesRsq::release_message() {
  // @@protoc_insertion_point(field_release:myApplication.ManageTradesRsq.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ManageTradesRsq::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:myApplication.ManageTradesRsq.message)
}

// repeated .myApplication.ManageTradesRsq.trade trades = 3;
inline int ManageTradesRsq::_internal_trades_size() const {
  return trades_.size();
}
inline int ManageTradesRsq::trades_size() const {
  return _internal_trades_size();
}
inline void ManageTradesRsq::clear_trades() {
  trades_.Clear();
}
inline ::myApplication::ManageTradesRsq_trade* ManageTradesRsq::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:myApplication.ManageTradesRsq.trades)
  return trades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myApplication::ManageTradesRsq_trade >*
ManageTradesRsq::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:myApplication.ManageTradesRsq.trades)
  return &trades_;
}
inline const ::myApplication::ManageTradesRsq_trade& ManageTradesRsq::_internal_trades(int index) const {
  return trades_.Get(index);
}
inline const ::myApplication::ManageTradesRsq_trade& ManageTradesRsq::trades(int index) const {
  // @@protoc_insertion_point(field_get:myApplication.ManageTradesRsq.trades)
  return _internal_trades(index);
}
inline ::myApplication::ManageTradesRsq_trade* ManageTradesRsq::_internal_add_trades() {
  return trades_.Add();
}
inline ::myApplication::ManageTradesRsq_trade* ManageTradesRsq::add_trades() {
  ::myApplication::ManageTradesRsq_trade* _add = _internal_add_trades();
  // @@protoc_insertion_point(field_add:myApplication.ManageTradesRsq.trades)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myApplication::ManageTradesRsq_trade >&
ManageTradesRsq::trades() const {
  // @@protoc_insertion_point(field_list:myApplication.ManageTradesRsq.trades)
  return trades_;
}

// -------------------------------------------------------------------

// SaleReq

// int64 goodid = 1;
inline void SaleReq::clear_goodid() {
  goodid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SaleReq::_internal_goodid() const {
  return goodid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SaleReq::goodid() const {
  // @@protoc_insertion_point(field_get:myApplication.SaleReq.goodid)
  return _internal_goodid();
}
inline void SaleReq::_internal_set_goodid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  goodid_ = value;
}
inline void SaleReq::set_goodid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_goodid(value);
  // @@protoc_insertion_point(field_set:myApplication.SaleReq.goodid)
}

// int64 money = 2;
inline void SaleReq::clear_money() {
  money_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SaleReq::_internal_money() const {
  return money_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SaleReq::money() const {
  // @@protoc_insertion_point(field_get:myApplication.SaleReq.money)
  return _internal_money();
}
inline void SaleReq::_internal_set_money(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  money_ = value;
}
inline void SaleReq::set_money(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:myApplication.SaleReq.money)
}

// int64 id = 3;
inline void SaleReq::clear_id() {
  id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SaleReq::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SaleReq::id() const {
  // @@protoc_insertion_point(field_get:myApplication.SaleReq.id)
  return _internal_id();
}
inline void SaleReq::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void SaleReq::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:myApplication.SaleReq.id)
}

// int32 kind = 4;
inline void SaleReq::clear_kind() {
  kind_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SaleReq::_internal_kind() const {
  return kind_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SaleReq::kind() const {
  // @@protoc_insertion_point(field_get:myApplication.SaleReq.kind)
  return _internal_kind();
}
inline void SaleReq::_internal_set_kind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  kind_ = value;
}
inline void SaleReq::set_kind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:myApplication.SaleReq.kind)
}

// int64 num = 5;
inline void SaleReq::clear_num() {
  num_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SaleReq::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SaleReq::num() const {
  // @@protoc_insertion_point(field_get:myApplication.SaleReq.num)
  return _internal_num();
}
inline void SaleReq::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_ = value;
}
inline void SaleReq::set_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:myApplication.SaleReq.num)
}

// int32 goodSpecial = 6;
inline void SaleReq::clear_goodspecial() {
  goodspecial_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SaleReq::_internal_goodspecial() const {
  return goodspecial_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SaleReq::goodspecial() const {
  // @@protoc_insertion_point(field_get:myApplication.SaleReq.goodSpecial)
  return _internal_goodspecial();
}
inline void SaleReq::_internal_set_goodspecial(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodspecial_ = value;
}
inline void SaleReq::set_goodspecial(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodspecial(value);
  // @@protoc_insertion_point(field_set:myApplication.SaleReq.goodSpecial)
}

// -------------------------------------------------------------------

// SaleRsq

// int32 status = 1;
inline void SaleRsq::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SaleRsq::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SaleRsq::status() const {
  // @@protoc_insertion_point(field_get:myApplication.SaleRsq.status)
  return _internal_status();
}
inline void SaleRsq::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SaleRsq::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:myApplication.SaleRsq.status)
}

// string message = 2;
inline void SaleRsq::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& SaleRsq::message() const {
  // @@protoc_insertion_point(field_get:myApplication.SaleRsq.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SaleRsq::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:myApplication.SaleRsq.message)
}
inline std::string* SaleRsq::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:myApplication.SaleRsq.message)
  return _s;
}
inline const std::string& SaleRsq::_internal_message() const {
  return message_.Get();
}
inline void SaleRsq::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SaleRsq::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SaleRsq::release_message() {
  // @@protoc_insertion_point(field_release:myApplication.SaleRsq.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SaleRsq::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:myApplication.SaleRsq.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace myApplication

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MallService_2eproto
